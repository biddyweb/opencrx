Release Name: openCRX/Core 2.12.0
Release Date: 2013-11-04

---------------------------------------------------------------------
Notes:
This software is published under the BSD license
as listed below.

Copyright (c) 2004-2013, CRIXP Corp., Switzerland
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions 
are met:

* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the
distribution.

* Neither the name of CRIXP Corp. nor the names of the contributors
to openCRX may be used to endorse or promote products derived
from this software without specific prior written permission


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.	

------------------

This product includes software developed by the Apache Software
Foundation (http://www.apache.org/).

This product includes software developed by contributors to
openMDX (http://www.openmdx.org/)

---------------------------------------------------------------------

0.    SUMMARY
      * Many new features (see detailed list below)
      * Many bug fixes

      For more information see below and http://www.opencrx.org/opencrx/2.12/new.htm

==============================================================================
Version 2.12.0                                                      2013-11-04
==============================================================================

1.    NEW FEATURES

      CR10008031
      Web Calendar. Added CalDavZAP as web calendar. Can be launched with 
      calendar wizard: UserHome > Wizards > Web Calendar. As any CalDAV
      client supported by openCRX, the web calendar allows to view, add, 
      edit and remove events.

      CR10011700
      Unify edit and new object. The "New..." object form allows to lookup 
      (with auto-completer) existing objects. If an object is selected, the form 
      is pre-filled with the selected object values. After editing the form, the 
      user can then choose either to "Create" (a new) or "Save" (the existing) object. 
      If no existing object is selected, the user only can "Create".
      
      CR10011691
      Ui1: css classes for UI elements. Custom css classes for UI elements. 
      Allow to specify different classes for field groups and object containers. 
      Css classes are customized in UI XML files with the properties cssClassFieldGroup
      and cssClassObjectContainer, e.g.      
      
		<org.openmdx.ui1.ElementDefinition name="org:openmdx:kernel:activity1:Activity:name">
			<_object>
				<active>true</active>
				<toolTip>
					<_item>Name of activity</_item>
				</toolTip>
				<label>
					<_item>Name</_item>
				</label>
				<order>
					<_item>0</_item>
					<_item>0</_item>
					<_item>10</_item>
				</order>
				<cssClassFieldGroup>classActivityName1</cssClassFieldGroup>
				<cssClassObjectContainer>classActivityName2</cssClassObjectContainer>
			</_object>
			<_content/>
		</org.openmdx.ui1.ElementDefinition>

      CR10011665
      document1: document filters. Applied the filter pattern to document1. It
      is now possible to create DocumentFilters (Saved Searches) for documents. 
      DocumentFilters can be used in SyncFeeds and be exported to WebDAV clients.

      CR10011280
      Grids: show total rows. The total rows in a grid are calculated when 
      going to a page with number > 0. Once calculated, the total rows are
      displayed for this grid.
      
      CR10011664
      document1: For a specific document list all objects which reference the document.
      The transient DocumentReferences are calculated by the database view 
      OOCKE1_TOBJ_DOCREFERENCE.

      CR10010108
      Cascading code fields. Code fields are rendered as cascaded drop-downs for
      {main category} and {sub category} in case their long texts have the format 
      {main category}|{sub category}.

      CR10011631
      Grids: custom queries for object identities.
      Grids should support custom-queries for object identities. The search form displays an 
      additional search field in case PortalExtension.getQuery() returns a non-null query for 
      the feature 'grid.getReferencedTypeName() + ":" + identity'.
      
      Example:
      Activities are searched for the attributes name, description or detailedDescription 
      if getQuery() returns the query-extension
      
      (UPPER(v.name) LIKE UPPER(" + s0 + ") OR UPPER(v.name) LIKE " + s1 + " OR UPPER(v.description) 
      LIKE UPPER(" + s2 + ") OR UPPER(v.description) LIKE " + s3 + " OR UPPER(v.detailed_description) 
      LIKE UPPER(" + s4 + ") OR UPPER(v.detailed_description) LIKE " + s5 + ")"
       
      for the feature 'org:opencrx:kernel:activity1:Activity:identity'. 

      CR10011238
      BPI adapter. More actions.
      
      1. Get contacts
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/contact?query=...&position=...&size=...
         * Method: GET
         * Sample queries: 
             ?query=thereExistsFullName().like(".*Doe.*");orderByFullName().ascending();
             ?query=thereExistsPostalAddress().postalCountry().equalTo(756);
             ?query=thereExistsEMailAddress().thereExistsEmailAddress().equalTo("joe@opencrx.org");
             ?query=thereExistsPhoneNumber().thereExistsPhoneNumberFull().like(".*44.*");
             
      2. Get organizations
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/organization?query=...&position=...&size=...
         * Method: GET
         * Sample queries: 
             ?query=thereExistsFullName().like(".*Suisse.*");orderByFullName().ascending();
             ?query=thereExistsPostalAddress().postalCountry().equalTo(756);       
             ?query=thereExistsEMailAddress().thereExistsEmailAddress().equalTo("joe@opencrx.org");
             ?query=thereExistsPhoneNumber().thereExistsPhoneNumberFull().like(".*44.*");

      3. Get address groups
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/addressGroup?query=...&position=...&size=...
         * Method: GET
         * Sample queries: 
             ?query=name().equalTo("test");                     
      
      4. Get address group
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/addressGroup/<name>
         * Method: GET      
      
      5. Get address group members
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/addressGroup/member?query=...&position=...&size=...
         * Method: GET
         * Sample queries: 
             ?queryType=org:opencrx:kernel:account1:PostalAddress&query=postalCountry().equalTo(:short:756);
             ?queryType=org:opencrx:kernel:account1:EMailAddress&query=thereExistsEmailAddress().like(".*sales.*");
             
      6. Get assigned activities (with optional query)
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/contact/<id>/assignedActivity?query=...&position=...&size=...
         * Method: GET
         * Sample queries: 
             ?query=thereExistsAssignedGroup().thereExistsActivityGroup().name().like(".*Bugs.*");
      
      7. Get account filter
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/accountFilter/<id>
         * Method: GET

      8. Get filtered contacts (with optional query)
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/accountFilter/<id>/contact?query=...&position=...&size=...
         * Method: GET
         
      9. Get filtered organizations (with optional query)
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/accountFilter/<id>/organization?query=...&position=...&size=...
         * Method: GET
 
      CR10011537
      Wizard QRencoder. Wizard operating on CrxObjects to create a QR code for 
      a given user input string. By default a QR code is generated for the object's 
      access URL. 
      
      CR10011507
      JoiningListDataBinding. Data binding which allows to collect objects from 
      a specified set of reference features and display in a grid. Here is an
      example configuration:
      
		<?xml version="1.0" encoding="UTF-8"?>
		<org.openmdx.base.Authority xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="org:openmdx:ui1" xsi:noNamespaceSchemaLocation="xri://+resource/org/openmdx/ui1/xmi1/ui1.xsd">
			<_object />
			<_content>
				<provider>
					<org.openmdx.base.Provider qualifiedName="CRX" _operation="null">
						<_object />
						<_content>
							<segment>
								<org.openmdx.ui1.Segment qualifiedName="Root" _operation="null">
									<_object />
									<_content>
										<featureDefinition>
											<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:activity1:Activity:summary">
												<_object>
													<type>org:openmdx:base:ExtentCapable</type>
													<multiplicity>0..n</multiplicity>
													<changeable>false</changeable>
													<isReference>true</isReference>
												</_object>
												<_content />
											</org.openmdx.ui1.StructuralFeatureDefinition>
										</featureDefinition>
										<elementDefinition>
											<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:activity1:Activity:summary">
												<_object>
													<active>true</active>
													<toolTip>
														<_item>Summary</_item>
													</toolTip>
													<label>
														<_item>Summary</_item>
													</label>
													<order>
														<_item>0</_item>
														<_item>0</_item>
														<_item>5</_item>
													</order>
													<maxMember>5</maxMember>
													<showMaxMember>5</showMaxMember>
													<dataBindingName>org.openmdx.portal.servlet.databinding.JoiningListDataBinding?features=[followUp,assignedGroup,activityLinkTo,assignedResource,workReportEntry,involvedObject];orderBy=[createdAt.ASCENDING]</dataBindingName>
												</_object>
												<_content />
											</org.openmdx.ui1.ElementDefinition>
										</elementDefinition>
									</_content>
								</org.openmdx.ui1.Segment>
							</segment>
						</_content>
					</org.openmdx.base.Provider>
				</provider>
			</_content>
		</org.openmdx.base.Authority>


      CR10011495
      LDAPSynchronizer. Workflow which exports contacts as LDIF.

		Configuration
		-------------
		* For each segment create Saved Search for Accounts named "LDAPSynchronizer"
		* The LDAPSynchronizer has the following configuration options (component
		  configuration with name 'LDAPSynchronizer'). Option names are of the
		  form <provider name>.<segment name>.<option name>.  
		  * syncDir. default is ldapdir. The LDIF entries are created in the following sub dirs:
		    * people/Add: contacts changed since syncKey in Add format
		    * people/Modify: contacts changed since syncKey in Modify format
		    * people/Delete: contacts disabled since syncKey in Delete format
		    * people/Error: people error entries
		    * groups/Add: group entries in Add format
		    * groups/Modify: group entries in Modify format
		    * groups/Error: group error entries
		    For each entry a separate LDIF file is created. The file name is of the 
		    form <syncKey>-<count>.ldif
		  * runAs: run as user
		  * baseDNPeople: base DN for people entries. Default is ou=people,dc=example,dc=com
		  * baseDNGroups: base DN for group entries. Default is ou=groups,dc=example,dc=com

		LDAP Server
		-----------
		Any LDAP server supporting the standard LDIF format can be used. E.g. on Linux use slapd. 
		Installation notes see http://wiki.debian.org/LDAP/OpenLDAPSetup:
		> apt-get install slapd
		> dpkg-reconfigure -plow slapd
		Domain name: examle.com
		Organization: Test
				
		Running LDAPSynchronizer
		------------------------
		The LDAPSynchronizer workflow is started with the Workflow Controller wizard as admin-Root.
		
		The exported LDIF files can then be processed using the LDIF importer tool
		provided by your LDAP server. E.g. ldapadd for OpenLDAP. Setup a cron job to
		process the exported LDIF files:

		Update people
		-------------
		In directory ldapdir/CRX/Standard/people run the following script:
		
		#!/bin/sh
		export ts=$(date +"%Y%m%d%H%M")
		mv Modify ${ts}-Modify
		mv Add ${ts}-Add
		mv Delete ${ts}-Delete
		cd ${ts}-Add
		cat *.ldif | ldapadd -c -x -D cn=admin,dc=example,dc=com -w <pwd>
		cd ..
		cd ${ts}-Modify
		cat *.ldif | ldapadd -c -x -D cn=admin,dc=example,dc=com -w <pwd>
		cd ..
		cd ${ts}-Delete
		cat *.ldif | ldapadd -c -x -D cn=admin,dc=example,dc=com -w <pwd>
		cd ..
		
		IMPORTANT:
		* Add operations must be done before Modify

		Update groups
		-------------
		In directory ldapdir/CRX/Standard/groups run the following script:
		
		#!/bin/sh
		export ts=$(date +"%Y%m%d%H%M")
		mv Modify ${ts}-Modify
		mv Add ${ts}-Add
		cd ${ts}-Add
		cat *.ldif | ldapadd -c -x -D cn=admin,dc=example,dc=com -w <pwd>
		cd ..
		cd ${ts}-Modify
		cat *.ldif | ldapadd -c -x -D cn=admin,dc=example,dc=com -w <pwd>
		cd ..		


2.    CHANGES

2.0.  CHANGED FEATURES
      
      CR10011828
      Move reference SimpleBooking::originContext to Booking::originContext.

      CR10011758
      InvolvedObject. Move class org:opencrx:kernel:activity1:InvolvedObject to 
      org:opencrx:kernel:generic:InvolvedObject. A CrxObject can now be related to CrxObject. 

      CR10011752
      Extend file format for operation org:opencrx:kernel:home1:Segment:importUsers(). The operation 
      takes a file of the following form:

        User;principal name;contact alias name;contact full name;primary principal group;initial password[;comma separated list of memberOf principal groups[;e-mail address of user[;time zone]]]

      Example:
        User;guest;-;Guest;Users;changeme;Users,Administrators;guest@opencrx.org;Europe/Zurich
        User;test;TEST;-;Users;changeme;Users,Administrators;Europe/Zurich
        
      CR10011742
      activity1: extend ActivityGroup. The activity1 model is extended by the following
      features:
      * ActivityGroup::activityGroupType (standard types are defined by enum Activities.ActivityGroupType).
      * Add AccountAssignments: related accounts can be assigned to activity groups.
      * Add ActivityGroup relationships: relationships betweeen activity groups can be captured.
      * Add reference to main activity: optional reference to the main activity of an activity group.
      * Add reference to accounts target group: optional reference to an account target group (e.g. useful for campaigns).       

      CR10011746
      CreateCampaign Wizard. Improve usability of CreateCampaignWizard and 
      CreateBulkActivityWizard. The wizard now supports multi-locale campaigns.
      It creates all required activity trackers, activity creators and account 
      filters and links the objects properly. All campaign-related tasks such
      as bulk creation of activities and follow-ups can now be performed on the
      main campaign tracker. 

      CR10011439
      AdditionalExternalLink::name. The following attributes are added:
      * AdditionalExternalLink::name
      * AdditionalExternalLink::description
      * DocumentAttachment::name
      * Rating::name
      
      CR10011464
      Migrate UML2Tools. Migrate UML2Tools to Papyrus / GraphViz:
      * Use Eclipse / Payprus (or any other Eclipse/EMF compliant tool) for editing
        the model (.uml files).
      * Use GraphViz to render diagrams. openCRX does not come with Papyrus diagrams.
        Instead, the diagrams are described as GraphViz compliant graphs and rendered
        with the GraphViz dot utility. 
      The new ant target "model-diagrams" generates the diagrams:
      * Complete the manually created GraphViz templates (.dott) located in ./src/model/graphviz. 
        The utility Model_1DiagramDrawer completes the templates (place-holders ${CLASS}, 
        ${ASSOCIATION} and ${INSTANCE_OF}) with the current model information and 
        generates GraphViz compliant .dot files.
      * Run the GraphViz dot utility for each generated .dot.
      * Run the 'album' (http://marginalhacks.com/Hacks/album/) utility to generate a web-index.
      
      Example:
      ant -Dalbum.theme.name=Uptight -Dalbum.theme.path="~/pgm/album/themes" -Dalbum.theme.url="http://myweb.com/_style/album/themes" model-diagrams

      
2.1.  FIXED BUGS
      none

2.2   REMOVED FEATURES
      none

---
