

                    =====================================
                           CHANGE LOG openCRX/Core
                    =====================================

==============================================================================
Version 2.11.0                                                      2013-04-02
==============================================================================

1.    NEW FEATURES
      
      CR10011324
      Use WITH RECURSIVE for view OOCKE1_TOBJ_ACCTMEMBERSHIP. If a database
      does not support WITH RECURSIVE, DbSchemaWizard makes a fallback to
      OOCKE1_TOBJ_ACCTMEMBERSHIP_ALT which uses cascading JOINs and UNIONs down
      to level 2.

      CR10010562
      Assignment of auto-created EMailAddresses. Add method Accounts.getUnassignableAddressesHolder(). 
      This way custom-specific extensions can specify the account. Default is 
      the segment administrator.
      
      CR10011164
      New workflows BulkCreateActivityWorkflow and BulkActivityFollowUpWorkflow.
      The workflows are launched by the corresponding wizards BulkCreateActivityWizard
      and BulkActivityFollowUpWizard. The new asynchronous workflows allow to create 
      and manage large amount of activities in the background. Status and progress
      is logged in the workflow process log. 
       
      CR10011268
      Workflows: structuring processes. Workflow processes can be now be structured
      using the WfProcessInstance::parent feature. The shared association 
      WfProcessInstanceHasChildren allows drill down the process hierarchy. 
      Typically, bulk workflows which create child processes use this feature.
 
      CR10011238
      BPI adapter. Simple, extensible adapter for business process integration.
      The default implementation supports the actions listed below. Additional
      actions can be added in custom projects by extending 
      org.opencrx.application.bpi.adapter.BpiAdapterServlet.
      
      1. Get code table
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Root/codeTable/country
         * Method: GET

      2. Get contact
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/contact/10000
         * Method: GET

      3. Get organization
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/organization/0
         * Method: GET

      4: Get organization members
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/organization/0/member
         * Method: GET

      5. Get activity creator
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/activityCreator/($t*ces*Bugs%20and%20Features)
         * Method: GET

      6. Create activity
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/activityCreator/($t*ces*Bugs%20and%20Features)/createActivity
         * Method: POST
         * Body:
		   { 
			   "name" : "name of activity",
			   "description" : "description of activity",
			   "detailedDescription" : "detailed description of activity",
			   "priority" : "required priority 0-5",
			   "reportingContact": "id of reporting contact",
			   "scheduledStart": "Jan 01, 2013 4:47:13 PM",
			   "scheduledEnd": "Jan 01, 2013 5:47:13 PM"
		   }

      7. Get activity
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/activity/1000000
         * Method: GET

      8. Do Follow-Up
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/activity/100000/doFollowUp
         * Method: POST
         * Body:
		   { 
			   "title" : "title of follow up",
			   "text" : "text of follow up",
			   "assignTo" : "optional contact id of assignTo contact",
			   "transition" : "optional transition name"
			   "updateActivity": "optional flag. When set to true, activity's detailedDescription is set to text and follow up is created with old detailedDescription"
		   }

      9. Get assigned activities
         * URL: http://localhost:8080/opencrx-bpi-CRX/org.opencrx.application.bpi1/provider/CRX/segment/Standard/contact/1000000/assignedActivity
         * Method: GET


      CR10011155
      Support for openCRX remote clients with minimal set of JARs. A remote
      client initializes the persistence manager factory as follows:
      
      javax.jdo.PersistenceManagerFatory persistenceManagerFactory =
          org.opencrx.kernel.utils.Utils.getPersistenceManagerFactoryProxy(
	          "http://127.0.0.1:8080/opencrx-rest-CRX/", 
	            "<username>, 
	            "<password>", 
	            "application/vnd.openmdx.wbxml"
	    	);

      The remote client communicates with the openCRX server via http/REST. The
      XML payload is encoded as web binary XML. The client has access to the full 
      API of openCRX. 
      
      The following libraries are required on Java SE and EE platforms:
      * opencrx-client.jar
      * openmdx-client.jar

      The following additional libraries are required on Java SE platforms:
      * openmdx/osgi/jre-1.6/enterprise/lib/osgi.enterprise.transaction.jar
      * openmdx/osgi/jre-1.6/extension/lib/resource.jar
 
      CR10011140
      New attribute Contact::dateOfDeath. The ICAL servlet now supports
      calendars for
      * Birthdays (/bdays)
      * Anniversaries (/anniversaries)
      * Dates Of Death (/datesofdeath)
      
      CR10011143
      ActivityCreator: icalClass. icalClass allows to define the default value 
      for newly created ICALs if not supplied by the client.
      
      CR10010470
      Contract::contractType. Add reference AbstractContract::contractType. 
      Amend backend so that createContract() sets the supplied contractType.

      CR10011065
      WorkExpenseRecord is a ConfiguredProduct. This allows to specify a
      (configured) product on work and expense records in addition to the
      uom. This simplifies the mapping to sales contract positions.

      CR10011067
      Addressable::regionType / region. Allows to assign an address to one or
      more regions (currently 3). Region types are defined by code value containers 
      where the entries denote regions. Custom-specific implementations (e.g.
      Accounts.updateAddress()) assign - according to the region type and e.g.
      postal code - the Addressable to a region.

2.    CHANGES

2.0.  CHANGED FEATURES
      
      CR10010724
      Refactoring of wizards:
      * Move business-logic to Java classes (wizard controllers). This allows
        to customize the business-logic by extending the controller classes.
      * Change to inline mode and use new wizard-specific tags

      CR10011058
      ObjectFinder: optimize result set. ObjectFinder shows newest matching 
      index entry for a given object only. Entries are ordered by createdAt 
      descending.
      
2.1.  FIXED BUGS
      
      CR10011082
      ADDRESS_TYPES. Fix qualified class name to 
      org:opencrx:kernel:address1:PhoneNumberAddressable.
      
      ... and many more bug-fixes.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.10.0                                                      2012-08-24
==============================================================================

1.    NEW FEATURES
      
      CR10010952
      DbSearchReplace. The method DbSearchReplace.dbSearchReplace() takes 
      the following parameters:
      * Connection conn
      * String columnNameIncludes
      * String columnNameExcludes
      * String searchPattern
      * String replacement
      * boolean validateOnly
      * PrintStream out
      The operation is performed on all tables. Only columns matching the columnNameIncludes / 
      columnNameExcludes patterns are processed. In case of validateOnly = true the UPDATE 
      statements are printed to out only (no DB executes). The utility can be used
      in custom wizards and extensions.
      
      Example:
      DbSearchReplace.dbSearchReplace(
	    conn, 
	    "(.*)", // includes
	    "(TEXT)|(DESCRIPTION)|(DETAILED_DESCRIPTION)|(MESSAGE_BODY)|(STRING_VALUE)|(BEFORE_IMAGE)", // excludes 
	    "(guest)",
	    "newguest", 
	    true, // validateOnly 
	    System.out
      );      
      Replaces all occurences of 'guest' by 'newguest' (e.g. useful for principal migration).
      
      DbSearchReplace.dbSearchReplace(
	    conn, 
	    "(.*)", // includes
	    "(TEXT)|(DESCRIPTION)|(DETAILED_DESCRIPTION)|(MESSAGE_BODY)|(STRING_VALUE)|(BEFORE_IMAGE)", // excludes 
	    "(/CRX/)",
	    "/MYCOMPANY/", 
	    true, // validateOnly 
	    System.out
      );       
      Replaces all occurences of '/CRX/' by '/MYCOMPANY/' (e.g. useful for provider migration).
      
      CR10010925
      AbstractServer: support for trust store and client cert auth. The IMAP and
      LDAP servlet accept the following new init-parameters when configured for
      SSL support:
      * sslTruststoreFile
      * sslTruststorePass
      * sslTruststoreType
      * sslNeedClientAuth      

      CR10010707
      JSP tag library. Portal offers the following tags:
      * portal:showobject
      * portal:query
      The tags can be used in wizards and make it easy to render objects and grids. 
      Example:      
      
        <%@ taglib uri="http://www.openmdx.org/tags/openmdx-portal" prefix="portal" %>
         ...
         <div id="content-wrap">
      	   <div id="content" style="padding:10px 0.5em 0px 0.5em;">
	         <portal:showobject id="AAA" object="<%= userHome %>" showAttributes="true" grids="alert,assignedActivity" navigationTarget="_none">
	           <portal:query name="assignedActivity" query="<%= activityQuery %>" />
	         </portal:showobject>
	         <portal:showobject id="BBB" object="<%= userHome.getContact() %>" showAttributes="true" grids="address" navigationTarget="_none" />
           </div> <!-- content -->
        </div>

      CR10010757
      Timers allow to schedule workflows. Timers replace the now deprecated
      Reminders.      
      
      CR10010648
      FileBrowserWizard. Wizard which allows to view and download files (e.g.
      log files) from AppServer. Access is restricted to admin-Root. 
      Extending org.opencrx.kernel.portal.wizard.FileBrowserWizardExtension
      allows to customize the behaviour of the wizard. 

      CR10010644
      AccountAssignmentDataBinding. Data binding returning a list of accounts 
      assigned to contracts, products or inventory items. The data binding is 
      configured in the UI configuration as follows:
      
      * featureDefinition
		<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:contract1:AbstractContract:account">
		  <_object>
		    <type>org:opencrx:kernel:account1:Account</type>
		    <multiplicity>list</multiplicity>
		    <changeable>false</changeable>
		  </_object>
		  <_content/>
		</org.openmdx.ui1.StructuralFeatureDefinition>
      
      * elementDefinition
		<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:contract1:AbstractContract:account">
		  <_object>
		    <dataBindingName>org.opencrx.kernel.portal.AccountAssignmentDataBinding</dataBindingName>
		    <active>true</active>
		    <filterable>true</filterable>
		    <spanRow>6</spanRow>
		    <toolTip>
		      <_item>Assigned Accounts</_item>
		    </toolTip>
		    <label>
		      <_item>Assigned Accounts</_item>
		    </label>
		    <shortLabel>
		      <_item>Assigned Accounts</_item>
		    </shortLabel>
		    <order>
		      <_item>0</_item>
		      <_item>0</_item>
		      <_item>5</_item>
		    </order>
		  </_object>
		  <_content/>
		</org.openmdx.ui1.ElementDefinition>
      
      CR10010636
      Jabber IM. The workflow org.opencrx.application.jabber.SendMessageWorkflow
      allows to send messages to a Jabber account (default and active Jabber
      service account defined on a user's home). The fields of the service
      account must be set as follows (e.g. for service jabber.org):
      * name: Jabber-ID, e.g. joe_doe@jabber.org●
      * username: account user name, e.g. joe_doe
      * password: account password
      * hostname: jabber.org
      * service: jabber.org
      The workflow is using the library smack library for sending XMPP messages.
      For more information about the library on how to connect to service providers
      see http://www.igniterealtime.org/projects/smack/.
      
      CR10010620
      Localized fields. A LocalizedFieldContainer holds LocalizedFields. 
      This allows to localize the values of any attribute of a CrxObject.
      
      CR10010549
      Support for Outlook e-mail message format (msg). BusinessProcessManager.jsp and
      UploadEMail.jsp wizards now support the Outlook MSG format for e-mail import.
      In addition, the method org.opencrx.kerne.utils.MimeUtils.mapMsgToMime() provides 
      a utility method for the conversion MSG --> MimeMessage.
            
      CR10010614
      The dashlet allows to configure a static menu. The menu shortcuts are configured 
      in a properties file with name ./wizards/StaticQuickAccessDashlet/<dashlet label>.properties. 

		# SampleMenu.properties
		e0000=<div style="font-size:120%;font-weight:bold;">Customers</div>
		e0001=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Customers"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0002=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Customers"); > Reference.filteredActivity
		e0003=<div style="font-size:120%;font-weight:bold;">Compliance</div>
		e0004=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Compliance"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0005=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Compliance"); > Reference.filteredActivity
		e0006=<div style="font-size:120%;font-weight:bold;">Generic</div>
		e0007=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Generic"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0008=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Generic"); > Reference.filteredActivity
		e0009=<div style="font-size:120%;font-weight:bold;">Communications</div>
		e0010=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Communications"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0011=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Communications"); > Reference.filteredActivity
		e0012=<div style="font-size:120%;font-weight:bold;">Analysis</div>
		e0013=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Analysis"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0014=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Analysis"); > Reference.filteredActivity
		e0021=<div style="font-size:120%;font-weight:bold;">Underwriting</div>
		e0022=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityCreator&queryType=org:opencrx:kernel:activity1:ActivityCreator&query=name().equalTo("Sample~Underwriting"); > Operation.org:opencrx:kernel:activity1:ActivityCreator:newActivity
		e0023=xri://@openmdx*org.opencrx.kernel.activity1/provider/CRX/segment/Standard/activityTracker&queryType=org:opencrx:kernel:activity1:ActivityTracker&query=name().equalTo("Sample~Underwriting"); > Reference.filteredActivity	

      CR10010522
      AccountIsMemberOfDataBinding. Data binding returning a list of accounts 
      which have the current account as member. The data binding is configured
      in the UI configuration as follows:
      
      * featureDefinition
		<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Account:memberOf">
		  <_object>
		    <type>org:opencrx:kernel:account1:Account</type>
		    <multiplicity>list</multiplicity>
		    <changeable>false</changeable>
		  </_object>
		  <_content/>
		</org.openmdx.ui1.StructuralFeatureDefinition>
      
      * elementDefinition
		<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Account:memberOf">
		  <_object>
		    <dataBindingName>org.opencrx.kernel.portal.AccountIsMemberOfDataBinding</dataBindingName>
		    <active>true</active>
		    <filterable>true</filterable>
		    <spanRow>6</spanRow>
		    <toolTip>
		      <_item>Is member of</_item>
		    </toolTip>
		    <label>
		      <_item>Is member of</_item>
		    </label>
		    <shortLabel>
		      <_item>Member of</_item>
		    </shortLabel>
		    <order>
		      <_item>0</_item>
		      <_item>0</_item>
		      <_item>5</_item>
		    </order>
		  </_object>
		  <_content/>
		</org.openmdx.ui1.ElementDefinition>

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10010951
      touchRealm ignores concurrent modification exceptions. This solves the problem
      that the concurrent creation of users fails.

      CR10010942
      openMDX/Portal: Refactoring data bindings. Replace DataBinding_1_0 and 
      DataBinding_2_0 interfaces by DataBinding interface.

      CR10010930
      openMDX/Portal: Unify Texts and Codes. The class Texts now delegates to Codes, 
      i.e. texts are now stored as codes in the CodeValueContainer with name 
      'TextsBundle'. In case Codes are not defined, Texts falls back to resource bundles. 

      CR10010561
      DataSourceRealm. Migrate from JDBCRealm to DataSourceRealm. All META-INF/context.xml
      are now using the DataSourceRealm. The -D configuration options 
      - opencrx.CRX.jdbc.driverName
      - opencrx.CRX.jdbc.url
      - opencrx.CRX.jdbc.userName
      - opencrx.CRX.jdbc.password=manager99

      CR20020010
      Portal: Improve grid search for code columns. Use short and long texts 
      for filter value to code mapping.
      
2.1.  FIXED BUGS
      
      CR10010783
      Outlook 2010. IMAP adapter tested with Outlook 2010.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.9.1                                                       2012-01-21
==============================================================================

1.    NEW FEATURES
      none
      
2.    CHANGES

2.0.  CHANGED FEATURES

      CR10010458
      User-specific pm for triggering reminders. 
            
      CR10010477
      refInitialize() to backend. Move refInitialize() to 
      BasicObjectImpl.openmdxjdoPostConstruct(). It is now optional for client 
      code to call refInitialize() after newInstance().

2.1.  FIXED BUGS
      
      CR10010473
      Fix Outermost RefPackage mismatch in UserHome.createUserHome()      
 
2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.9.0                                                       2011-12-28
==============================================================================

1.    NEW FEATURES
      
      CR10010411
      Alerts/Reminders. User-specific reminders which trigger alerts.
      
      CR10010308
      Support for TomEE. openCRX works on Apache TomEE from version 1.0.0 beta 2 on.
      
      Steps for manual installation:
       
	  Prepare dirs
	  ------------
		mkdir $CATALINA_BASE/apps
		mkdir $CATALINA-BASE/maildir
		mkdir $CATALINA-BASE/airsyncdir
		
      Update EAR
      ----------
		cp opencrx-core-EAR $CATALINA_BASE/apps
			
      Update bin
      ----------
		cp openmdx-system.jar $CATALINA_BASE/bin
		cp setenv.sh $CATALINA_BASE/bin
		
      Update lib
      ----------
		cp hsqldb.jar $CATALINA_BASE/lib
		cp catalina-openmdx.jar $CATALINA_BASE/lib
		cp openmdx-base.jar $CATALINA_BASE/lib
		
      Update conf
      -----------
		Add resources to openejb.xml
		Add properties to logging.properties
		Add users to tomcat-users.xml
		
      Start Tomcat
      ------------
		cd $CATALINA_BASE/bin
		./catalina.sh run

      openejb.xml
      -----------
		<Resource id="jdbc_opencrx_CRX" type="DataSource">
		 JdbcDriver org.hsqldb.jdbcDriver
		 JdbcUrl jdbc:hsqldb:hsql://127.0.0.1:9001/CRX
		 UserName sa
		 Password manager99
		 JtaManaged true
		</Resource>

		<Resource id="mail/provider/CRX" type="javax.mail.Session">
		 mail.debug true
		 mail.transport.protocol smtp
		 mail.smtp.user myusername
		 mail.smtp.password mypassword
		 mail.smtp.starttls.enable true
		 mail.smtp.auth true
		 mail.smtp.host myhost
		 mail.smtp.port 25
		 mail.smtp.user myuseruname
		 mail.from mymailfrom
		 mail.store.protocol pop3s
		 mail.pop3s.host myhost
		 mail.pop3s.port 995
		 mail.pop3s.auth true
		 mail.pop3s.user myusername
		 mail.pop3s.password mypassword
		</Resource>
		
      logging-properties.xml
      ----------------------
      
		.level = WARNING
		
		############################################################
		# openMDX Logging Configuration
		# Add to logging.properties to configure openMDX logger
		############################################################
		org.openmdx.kernel.log.LoggerFactory.level = WARNING
		org.openmdx.kernel.log.LoggerFactory.handler = 1localhost.org.apache.juli.FileHandler
		
      tomcat-users.xml
      ----------------
      
		  <user username="admin-Root" password="admin-Root" roles="OpenCrxRoot,manager"/>
		  <user username="admin-Standard" password="admin-Standard" roles="OpenCrxAdministrator"/>
		  <user username="guest" password="guest" roles="OpenCrxUser,Guest"/>
		  
      setenv.sh
      ---------
      
		#!/bin/sh
		
		# [openCRX]
		export JAVA_OPTS="$JAVA_OPTS -Xmx800M"
		export JAVA_OPTS="$JAVA_OPTS -XX:MaxPermSize=256m"
		export JAVA_OPTS="$JAVA_OPTS -Dtomcat.server.port=8005"
		export JAVA_OPTS="$JAVA_OPTS -Djava.protocol.handler.pkgs=org.openmdx.kernel.url.protocol"
		export JAVA_OPTS="$JAVA_OPTS -Dorg.opencrx.maildir=$CATALINA_BASE/maildir"
		export JAVA_OPTS="$JAVA_OPTS -Dorg.opencrx.airsyncdir=$CATALINA_BASE/airsyncdir"
		# export JAVA_OPTS="$JAVA_OPTS -Dorg.openmdx.persistence.jdbc.useLikeForOidMatching=false"
		# export LOGGING_MANAGER="-Djava.util.logging.manager=java.util.logging.LogManager"
		export CLASSPATH=$CLASSPATH:$CATALINA_BASE/bin/openmdx-system.jar
		# [openCRX]
		
		# [openCRX:CRX]
		export JAVA_OPTS="$JAVA_OPTS -Dopencrx.CRX.jdbc.driverName=org.hsqldb.jdbcDriver"
		export JAVA_OPTS="$JAVA_OPTS -Dopencrx.CRX.jdbc.url=jdbc:hsqldb:hsql://127.0.0.1:9001/CRX"
		export JAVA_OPTS="$JAVA_OPTS -Dopencrx.CRX.jdbc.userName=sa"
		export JAVA_OPTS="$JAVA_OPTS -Dopencrx.CRX.jdbc.password=manager99"
		# [openCRX:CRX]
		
		echo "Using JAVA_OPTS:       $JAVA_OPTS"


      CR10010390
      Addressable has timezone. Allow to set timezone for an Adressable.      
      
      CR10010243
      Indexer supports XML documents. The indexer supports
      * mimeTypes application/vnd.openxmlformats*
      * extensions .docx, .xlsx

      CR10010296
      LDAP support for AbstractGroup. The LDAP server supports the following
      BaseDN formats:
      * Get contacts by account filter, e.g. "All Accounts":
        ldapsearch -D "guest@Standard" -w guest -h localhost -p 1389 -b "ou=filter/All Accounts,ou=Persons" -l 100 -z 100 -P 3 ""
        
      * Get contacts by account group members, e.g. "MyGroup":
        ldapsearch -D "guest@Standard" -w guest -h localhost -p 1389 -b "ou=group/MyGroup,ou=Persons" -l 100 -z 100 -P 3 ""

      CR10010293
      CustomerCare Wizard. Wizard which supports the most important use cases 
      for customer care:
      * Search account
      * Show activities overview
      * Create new activity
      * Perform activity follow up
      Permissions must be granted by the segment admin for the users to show
      activities and activity creators:
      * Grant permission for creator on form 'Search Contact'
        name=CustomerCareWizard:SEARCH_CONTACT:activityCreator/id
        action=+show
      * Grant permission for creator on form 'Contact'
        name=CustomerCareWizard:CONTACT:activityCreator/id
        action=+show
      * Grant permission for process state:
        name=CustomerCareWizard:activityProcess/id/processState/[:* | id]
        action=+show
      The wizard can be launched on:
      * Activity group: in this case 'Contact.Search' searches within the
        reporting contacts of the activities of the activity group.
      * Account: in this case 'Contact.Search' searches within the account
        members.
      * User home: in this case 'Contact.Search' searches within all contacts.
      
      CR10010286
      BulkActivityFollowUp wizard. Wizard to perform bulk follow ups on 
      a set of activities. The wizard is launched on an existing activity
      which serves as template for selecting the activities to process by
      - assigned activity groups
      - process state
      
      CR10010285
      BulkCreateActivity wizard. Wizard for bulk activity creation based on a 
      "Saved search - Account". A typical use-case for this wizard is to create
      an activity for each account which is member of a campaign (defined by
      the "Saved search - Account").
      
      CR10010023
      Search criteria for group membership. Search criteria for account group 
      membership:
      * AddressAccountMembershipFilterProperty
      * AccountMembershipFilterProperty

      CR10010245
      Accounts: add preDelete and preStore call-backs for accounts and addresses:
      Accounts.removeAccount(), Accounts.updateAccount(), Accounts.removeAddress(), 
      Accounts.updateAddress().
      
      CR10010021
      Reference AccountAddress::authority allows to specify the authority of account 
      addresses. E.g. The authority of an employee's business address is a company. 
      
      CR10010136
      The following classes extend from CrxObject:
      * ActivityEffortEstimate
      * ActivityGroupAssignment
      * ActivityParty
      * CalendarDay
      * PriceModifier
      * ProductConfiguration
      * ProductConfigurationTypeSet
      * ProductReference
      * ResourceAssignment
      * Vote      
      
      CR10010113:
      AccessControl: RunAs-Permissions. The AccessControl plug-in supports
      runAs permissions. runAs permissions allow to run object access operations
      (read, update, delete) under a different principal than the 
      requesting principal. Two different formats are supported:
      
      * 'object:authority/object path@runAsPrincipal', e.g.
        'object:org.opencrx.kernel.activity1/activityTracker/{id}@user1'. The
        meaning of this permission is: "run the object access operation for the
        specified object as user1'.
        - An object permission defined for an activity creator implies runAs
          permissions for all activities created with this creator.
      * 'groupMembership:authority/group path@runAsPrincipal', e.g.
        'groupMembership:org.opencrx.kernel.activity1/activityTracker/{id}@user1'.
        The meaning of this permission is: "In case the object is member of
        the specified group, run the object access operation as user1".

      Permissions are created as follows:
      * Login as segment admin
      * Navigate to Security Policy > Privileges
      * Create a new privilege and set name to the permission name,
        e.g. 'object:org.opencrx.kernel.activity1/activityTracker/{id}@user1'
      * Create a new role or select an existing one
      * Create a new permission and set the name to the permission name,
        e.g. 'object:org.opencrx.kernel.activity1/activityTracker/{id}@user1'. Set
        action to 'runAs'.
      * Assign to role to a principal
      
      The AccessControl plug-in handles runAs permissions as follows:
      * object: In case the XRI of the accessed object matches the permission's
        path pattern, the object access operation is run as the principal 
        specified by the permission.
      * groupMembership: In case the accessed object is member of a group where
        the XRI of the group matches the permission's path pattern, the object 
        access operation is run as the principal specified by the permission. 
        groupMembership currently only works for activities / activity groups.


      CR10010141
      Portal: GridMoveUpObjectAction, GridMoveDownObjectAction. Add grid actions which 
      allow to move position of values for multi-valued, ordered reference features.
      
      CR10010109
      GUI: element-level security. Element-level security allows to set show and
      edit permissions for the following GUI elements:
      * Fields
      * Field groups
      * Menu items / operations
      * Grids
      Permissions are defined per role. One or more role can be assigned to
      a user's principal. The wizard ManageGUIPermissions allows to view and
      manage (segment administrator only) permissions. Roles are created
      by the segment administrator in Security policies > Roles.      

      CR10010092
      ICAL mapping of attendees. Attribute emailHint added to AbstractActivity party. 
      The hint allows to have multiple activity parties pointing to the same account. 
      The hint serves as e-mail address selector in case the account has multiple 
      e-mail addresses. The ICAL import sets the hint field for each imported ATTENDEE, 
      whereas the ICAL exporter/mapper uses the hint to generate the ATTENDEEs. When 
      importing an ICAL and the e-mail address of an ATTENDEE is unknown, an e-mail 
      address is created and assigned to the segment admin's contact.
      
      CR10010069
      DbCopy Wizard. The wizard can be invoked as root admin. It allows to
      copy data from a source database instance to a target instance. It
      provides the same functionality as the command-line version. 
      
      CR10010063
      DbSchemaWizard. The wizard can be invoked as root admin. It allows to
      create, validate, upgrade and migrate an openCRX database. The database
      can either be specified by its JNDI name or by a JDBC connection URL.
      Validation performs the following checks:
      * Test existence of tables
      * Test columns of all tables (missing / extra columns)
      * Test existence of views
      * Test existence of indexes
      * Test existence of sequences
      * Test existence of preference entries (missing / extra entries)
      Fix allows to fix the reported issues:
      * Creation of tables
      * Creation of missing columns
      * Creation/replacement of views
      * Creation of indexes
      * Creation of sequences
      * Creation/replacement of preference entries
      Fix never never drops or removes any database objects or rows. So you
      never loose data. However, because fix may modify your schema it
      is recommended to backup before upgrading / fixing a database. It is 
      possible to run fix on an empty database schema. In this case all 
      tables, views, indexes and sequences are created.
      
      Known issues:
      * In some cases the CREATE OR REPLACE VIEW statements may fail for
        several reasons (table with the same name exists, non-compatible
        column types, etc.). In this case it is recommended to remove all
        views and run fix. It recreates all views.      
      
      CR10010042
      PortalExtension: grid actions. Allow to add custom-specific actions 
      to grid menu 'Actions'. Default actions added for openCRX are:
      * Export --> XML
      * Export --> XLS 
      which export either the current grid page or the selected objects.            
            
      CR10010022
      Address::moveAddress. Allow to move address to a target account and 
      update address references:
      - E-Mail sender and recipients      
      - Address group members
      The operation performs the following steps:
      - clone source address to target account if it does not already exist
      - update references
      - disable source address
      
      CR10010001
      activity1: sub-activities. SubActivityTransition allows to create sub
      activities when performing a transition. The sub activity is created 
      using the configured activityCreator. In case useCreatorAsTemplate 
      is set to true, the created activity is assigned to activity groups which 
      are clones of the activity creator's activity groups. The names of the 
      cloned groups are specified by templateNamePattern. The groups are only 
      cloned if they do not already exist (matching creation context and  name).
      Sub activities are linked to their parent activities with:
      - Activity::creationContext
      - Activity::LinkTo[linkType=IS_CHILD_OF]
      
      CR10008383
      contract1: Contract creators / groups. The contract1 model is extended
      as follows:
      
      * Refactoring
        - SalesContract
        - GenericContract
        - Rename AbstractContractPosition to SalesContractPosition
        *IMPORTANT:*
        All source code (plugin extensions, wizards, calculation rules, etc.) MUST 
        be migrated as follows:
        - Replace class AbstractContract by SalesContract
        - Replace class AbstractContractPosition by SalesContractPosition        
      * SalesContract 
        - Add reference <<0..n>> SalesContract.salesVolumeContract
        - Remove operations SalesContract.assignSalesVolumeBudgets(),
          findSalesVolumeBudgets()
        - Remove operation SalesContractPosition.assignSalesVolumeBudgets()
      * ContractGroup
        - Add class ContractGroup
        - Add class ContractFilterGroup
        - Add class ContractGroupAssignment
      * ContractCreator
        - Add class ContractCreator
        - Add class SalesContractCreator
        - Add class ContractType
      * SalesVolumeContract
        - Add class SalesVolumeContract
        - Add class SalesVolumeTarget
      * SalesVolumeBudget
        - Remove classes CustomerAssignment, BrokerAssignment,
          SalesRepAssignment
      
2.    CHANGES

2.0.  CHANGED FEATURES
      
      CR10010358
      Reload codes. Reloaded codes are propagated to GUI and backend without the 
      need to restart the web app.
      
      CR10010295
      ContactsFeed references AbstractGroup. ContactsFeed references AbstractGroup 
      instead of Group.
      
      CR10010160
      Enhance VCARD importer. Enhance VCARD (and other importers) so that 
      it accepts mime types and file extensions. Also enhance so that 
      minimalistic VCARDs can also be imported.
      
      CR10010131
      Deprecate prefs_preference. Move persistence config to 
      * src/jar/opencrx-resources.jar/META-INF/Kernel.properties
      * src/jar/opencrx-resources.jar/Security.properties
      The table prefs_preferences is not required anymore.
      
      CR10010091
      Mapping of e-mail recipients. Unknown E-Mail recipients are currently mapped 
      to the generic e-mail address "UNKNOWN". Instead an e-mail address should 
      be created and assigned to segment admin. The address can be moved with 
      moveAddress() to the proper contact at a later time.
      
      CR10009825
      SegmentSetup: Security of default activity processes and default activity 
      types. In addition to 'Administrator' the PrincipalGroup 'Users' should also 
      be added to the list of OwningGroups of the Default Activity Processes and 
      Default Activity Types (including all their composites). Furthermore, the 
      access levels of all of the above objects should be set 
      to 3-1-1 (browse, update, delete).

2.1.  FIXED BUGS
      none
 
2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.8.5                                                       2011-05-04
==============================================================================

1.    NEW FEATURES

      CR10009791
      Workspaces. Left-pane added which hosts workspace-level dashboard. The
      workspace-level dashboard works like the (horizontal) object-level dashboard:
      * dashlets can be added removed by admin or user
      * dashlets can be shared by admin by prefixing the label with a *
      Workspaces can be managed by the segment admin only.      
      
      CR10009913 
      UserHomes.initUserHome(). Add a backend method which allows to 
      initialize a user's home. The method can be overriden and extended by a 
      custom-specific subclass.
      
      CR10009876
      Activity replication. Activity replication is supported as follows:
      * Activities linked with the link type 'is replica of' or 'is replica of
        (obfuscated)' are updated when the original activity is modified. 
        The method Activities.replicateActivity() allows to control the
        replication at attribute-level. By default, the attributes are
        replicated as follows:
        * In case activityLinkType is 'is replica of':
          - name
          - description
          - detailedDescription
          - misc1
          - misc2
          - misc3
          - location
          - scheduledStart
          - scheduledEnd
          - actualStart
          - actualEnd
          - dueBy
          - priority
        * In case activityLink type is 'is replica of (obfuscated):
          - name (from activityLink.name)
          - description (from activityLink.description)
          - scheduledStart
          - scheduledEnd
          - actualStart
          - actualEnd
          - dueBy
          - priority
      * Upon creation of new activities the creation of replica can be
        controlled with the method Activities.getActivityReplicationDescrs().
        E.g. a custom-specific extension of getActivityReplicationDescrs() can
        replicate activities created with the creator 'guest~Home~Meetings' with
        the creator 'guest~Private~Meetings' and obfuscate the replica.
                      
      CR10009836
      UserSettings: Create UserHome > UserProfile > default document profile. 

      CR10009478
      PrestaShop integration. The PrestashopSynchronizer integrates PrestaShop
      (http://www.prestashop.com/). PrestaShop is a PHP-based application. This
      first version of the adapter imports data from PrestaShop to openCRX. The
      following business objects are imported:

      PrestaShop                 openCRX
      ----------------------------------------------
      Customer                   Account, Address
      Orders                     Sales orders, Invoices
      Products, Prices, Taxes    Products, Prices, Sales Taxes

      The PrestashopSynchronizer is implemented as Workflow which directly accesses
      the PrestaShop database. It periodically queries the PrestaShop database for 
      new and updated data.

      The PrestashopSynchronizer allows to map up to 10 shops to one openCRX
      segment. All imported data is qualified with the shop name to prevent
      conflicts.

      The PrestashopSynchronizer is configured as follows:

      1. JDBC Resource      
      ================
      For each PrestaShop a JDBC resource entry must be added to web.xml of the
      opencrx-core-CRX.war and openejb.xml. Here is an example:
      
      openejb.xml
      -----------
      <!-- PrestaShop -->
      <Resource id="jdbc_PrestaShop" type="DataSource">
        JdbcDriver com.mysql.jdbc.Driver
        JdbcUrl jdbc:mysql://127.0.0.1:3306/prestashop
        UserName root
        Password manager99
        JtaManaged true
      </Resource>
      
      web.xml of opencrx-core-CRX.war
      -------------------------------
      <resource-ref>
        <res-ref-name>jdbc_PrestaShop</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
      </resource-ref>
      
      2. Configure servlet PrestashopSynchronizer
      ===========================================
      Add the servlet PrestashopSynchronizer to the web.xml of opencrx-core-CRX.war:
      
      Add init-param to the WorkflowController servlet:      
      <init-param>
        <param-name>path[3]</param-name>
        <param-value>/PrestaShopSynchronizer</param-value>
      </init-param>
      
      Add servlet configuration:
      <!-- PrestaShopSynchronizer -->
      <servlet id="PrestaShopSynchronizer">
        <servlet-name>PrestaShopSynchronizer</servlet-name>
        <servlet-class>org.opencrx.application.shop.prestashop.PrestaShopSynchronizer</servlet-class>
        <init-param>
          <param-name>providerName</param-name>
          <param-value>provider/CRX</param-value>
        </init-param>
      </servlet>
      
      Add servlet mapping:
      <servlet-mapping>
        <servlet-name>PrestaShopSynchronizer</servlet-name>
        <url-pattern>/PrestaShopSynchronizer/*</url-pattern>
      </servlet-mapping>      

      3. Component Configuration
      ==========================
      As admin-Root add the following component configuration for PrestashopSynchronizer:
      
      PrestaShopSynchronizer
        String property name                Value
        CRX.Standard.runAs[0]               prestashop-test1
        CRX.Standard.emailUnique[0]	        false
        CRX.Standard.shopName[0]	 	    Test1	 	  	  	 	 	 	
        CRX.Standard.jdbcResourceName[0]    jdbc_PrestaShop
        CRX.Standard.tablePrefix[0]         ps_	 	  	  	 	 	 	
        CRX.Standard.syncKey[0]	 	        0	       
      
      Set the initial value of the sync key to 0. This imports all data from PrestaShop.
      After the initial sync only new and updated data is imported. You can force a 
      full-import by setting sync key to 0.
      
      runAs must be a valid openCRX user for the segment. All operations are performed
      as this user.
      
      4. Database
      ===========
      Amend the openCRX database configuration as follows:
      
      Create the following sequence. This makes the column alias_name an autonum column:
      
      CREATE SEQUENCE OOCKE1_alias_name_seq
        START WITH 1000000
        INCREMENT BY 1;
      
      INSERT INTO prefs_Preference 
          (object_rid, object_oid, object_idx, string_value) 
      VALUES(
          'preference/OOCKE1', 'PERSISTENCE:autonumColumn', 002, 'OOCKE1_ACCOUNT.alias_name AS CHAR(20)'
      ) ; 

      Make sure that the columns OOCKE1_PRODUCT.description and detailed_description are
      of type text. Product descriptions in PrestaShop are also defined as text.
      
      
2.    CHANGES

2.0.  CHANGED FEATURES
      
      CR10009959
      Import E-Mails. Import E-Mails in one UOW (legacy from v1 plug-ins).
            

2.1.  FIXED BUGS
      none
 
2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.8.0                                                       2010-12-27
==============================================================================

1.    NEW FEATURES

      CR10009668: WebDAV Support
      WebDAV Support. WebDAV servlet added. A user must created a DocumentProfile
      (e.g. Documents~{user}) with one or more DocumentFeed. The client connects 
      with URLs of the form:
      ./opencrx-webdav-CRX/{provider.id} "/" {segment.id} "/user/" {user.id} "/profile/" {profile.name} "/" {feed.name} ["/" {folder.name} ]* "/" {document.name}
      E.g.
      webdav://guest@localhost:8080/opencrx-webdav-CRX/CRX/Standard/user/guest/profile/Documents~guest/
      Files are mapped to documents, folders are mapped to document folders.
      
      CR10009687
      partyStatus. Extend AbstractActivityParty by attribute partyStatus:
      * PARTY_STATUS_NEEDS_ACTION = 1;
      * PARTY_STATUS_ACCEPTED = 2;
      * PARTY_STATUS_DECLINED = 3;
      * PARTY_STATUS_TENTATIVE = 4;
      * PARTY_STATUS_DELEGATED = 5;
      * PARTY_STATUS_COMPLETED = 6;
      The partyStatus has the same semantics as ICalendar PARTSTAT.
      
      CR10009674
      assignmentRole. Extend DocumentFolderAssignment by assignmentRole.
      
      CR10009667
      CardDAV Support. CardDAV servlet added. A user must created a CardProfile
      (e.g. AddressBook~{user}) with one or more ContactsFeed. The client connects 
      with URLs
      * ./opencrx-carddav-CRX/{provider}/{segment}/user/{user}/profile/{profile name} or
      * ./opencrx-carddav-CRX/{provider}/{segment}/user/{user}/profile id}
            
      CR10009623
      SalesVolumeBudget. Subclass of budget which allows to define sales volume 
      budgets and targets and to collect sales volume contributions. 
      SalesVolumeBudget allows to define a sales volume target for a set of 
      accounts in different roles. Supported roles are: customer, sales rep
      and broker. The operation assignBudgets() on contracts and contract
      positions allows to automatically identify and assign the matching 
      budgets to contract positions. The operation SalesVolumeBudget.recalcBudget()
      iterates all contract positions with an assignment to the invoked
      budget. The contract positions are then matched to budget positions
      (product and currency / uom must match). In case of a match the
      contract position acts as contribution to the budget position which 
      results in the creation of a simple booking on the assigned depot position.
      The contribution type allows to define how the contribution is
      calculated: either based on the contract position's quantity or one
      of the base amount, amount, discount amount or price per unit values.       

      CR10009611
      Activities source for ActivityFilterGlobal. Allow to specify the activities 
      source for global activity filters. Possible sources are
      * Activity segment
      * User home
      * Activity group
      * Account 
      The default source is the activity segment.
      
      CR10009592
      PortalExtension: grid coloring. Extend portal extension by method 
      getGridRowColors(RefObject). Deprecate at the same time the method
      hasGridColors().
      
     /**
      * Returns colors which is used as foreground and background colors when an 
      * object is rendered in a grid.
      * @return foreground (at index 0) and background color (at index 1) or null. 
      */    
     @Override
     public String[] getGridRowColors(
    	RefObject_1_0 obj
     ) {
         if(obj instanceof Activity) {
             Activity activity = (Activity)obj;
             if(activity.getDueBy() != null) {
                 String dueByDate = DateTimeFormat.BASIC_UTC_FORMAT.format(activity.getDueBy()).substring(0, 8);
                 String todayDate = DateTimeFormat.BASIC_UTC_FORMAT.format(new Date()).substring(0, 8);
                 return dueByDate.compareTo(todayDate) > 0 ?
                     new String[]{null, "red"} :
                         dueByDate.compareTo(todayDate) == 0 ?
                             new String[]{null, "green"} :
                                 null;
              }
          }
          return super.getGridRowColors(obj);
      }
      
      CR10009578
      Tiny URLs. Use tiny URLs for access URLs generated by AirSync, 
      CalDAV, ICS and VCARD adapters.
      
      CR10009533
      Support for Twitter. Twitter support is added as follows:
      * OAuth: Support to configure consumer key and consumer secret. 
        Wizard to create access token and access key.
      * Wizards to send direct messages and update statuses.
      * Workflow to send alert notifications via Twitter.
      The implementation is based on the library twitter4j. For more 
      information see http://twitter4j.org.
      
      Register with Twitter
      ---------------------
      * Before openCRX can invoke the Twitter API, you need to register your
        instance of openCRX at http://twitter.com/oauth_clients/new to
        acquire a consumer key and a consumer secret. Register your openCRX
        instance as follows:
        o Application Name: the name of your openCRX instance, e.g. 'openCRX of
          MyCompany'
        o Application Website: the URL users can access the openCRX instance,
          e.g. https://crm.mycompany.com/opencrx-core-CRX
        o Application Type: Client
        o Default Access type: Read/Write
        o Use Twitter for login: false
        If registration is successful you should get a 'Consumer Key' and
        a 'Consumer Secret' for your application.
      * Now login as admin-Root and navigate to the tab Administration > 
        Configuration.
        o Create a new component configuration with
          - Name: Twitter
          - Qualifier: Twitter
        o Navigate to the newly created component configuration and add the 
          following string properties:
          - CRX.OAuth.ConsumerKey: Twitter consumer key.
          - CRX.OAuth.ConsumerSecret: Twitter consumer secret.
          NOTE: segment-specific tokens are configured using the pattern
          - <provider name>.<segment name>.OAuth.ConsumerKey
          - <provider name>.<segment name>.OAuth.ConsumerSecret
      * Logout
      Users are now able to setup Twitter accounts.
      
      Create Twitter Account
      ----------------------
      * Login as user, e.g. guest
      * Twitter accounts are configured on a user's home in the tab 
        'Service Account'. A Twitter account is created as follows:
        o Name: Twitter user display name
        o Active: true
        o Default: true
      * Invoke the wizard 'Twitter - Create access token'. The wizard shows
        an URL and a field to enter a PIN code. Open the URL in a new browser
        window. This redirects you to Twitter asking to grant access for
        the openCRX instance. If you grant access a PIN code will be displayed.
        Enter the PIN code and click OK. If all goes well, the fields 
        'Access token key' and 'Access token secret' are set now.
      
      Using the Wizards
      -----------------
      Almost on all objects the following two wizards are available:
      * Twitter - Send Message. This wizard allows to send a message to a 
        list of Twitter users. In addition the message text is attached as note
        and if you are invoking the wizard on an activity a follow up is created.
        Note that the message is only visible to the recipients.        
      * Twitter - Update Status. This wizard allows to update the status for one
        of the configured Twitter accounts. Status updates are visible to all 
        followers of the selected Twitter account.                
      
      Using the SendDirectMessageWorkflow
      -----------------------------------
      The SendDirectMessageWorkflow works the same way as the 
      SendMailNotificationWorkflow. Instead of sending an EMail to the user in 
      case of alert updates, the alert title including a tiny url pointing to 
      the underlying openCRX object is sent as direct message to the default 
      Twitter account of the subscribing user. The SegmentSetupWizard creates 
      the required entries for the workflow and topic. Users simply need to 
      subscribe to the topic 'Alert Modifications (Twitter)'.
      
      
      CR10009558
      Portal: LookupObjectEventHandler. Action EVENT_FIND_OBJECT takes as 
      parameter PARAMETER_REFERENCE which defines the type of the lookup object. 
      In addition to modeled reference names, user-defined structural feature 
      definitions are also supported.
      
      CR10009396
      IMAP IDLE. IMAPAdapter supports IMAP IDLE. See 
      http://en.wikipedia.org/wiki/IMAP_IDLE.
      
      CR10009494
      Portal: Show-always option for search forms. Option allows the user to show 
      search form automatically when a grid is displayed.
      
      CR10009530
      CopyDb: replace provider name. Support to replace provider name when
      copying db. Added options:
      * -Dprovider.name.source 
      * -Dprovider.name.target
      See ant CopyDb for more info.
      
      CR10009491
      ICAL TRANSP: TRANSPARENT | OPAQUE. The attribute TRANSP is mapped to the 
      activity's assigned resources. If the requesting user has at least one 
      resource assignment with workingUnitPercentage > 0 then TRANSP=OPAQUE, 
      else TRANSPARENT. TRANSP is managed by the CalDAV, ICS and FREEBUSY servlets.
      
      CR10009511
      Root objects per perspective. User settings should allow to configure 
      the state (show|hide) of root objects per perspective.
      
      CR10009515
      linkToAndFollowUp(). The operation Activity.linkToAndFollowUp(linkTo, transition) 
      performs a doFollowUp() where
      * followUp.title is set to linkTo name
      * followUp.text is set to linkTo detailed description
      * followUp.activity is set to linkTo
      * activity is linked to linkTo
      
      CR20019321
      Title tag for labels. Create a title tag for labels if a tooltip for a 
      field is customized.      

2.    CHANGES

2.0.  CHANGED FEATURES

 	  CR10009726
 	  ProductClassification and ActivityProcessState are DescriptionContainer.
 	  
      CR10009614
      Contact.ouMembership(). The calculation of the derived attribute ouMembership 
      is expensive. E.g. reading all accounts with REST results in account and membership 
      queries for each account. Replace derived reference ContactIsMemberOf by shared 
      association.
      
      CR10009542
      AccessControl: optimize applyBrowseFilter in case of multiple invocations.
      
      CR10009512
      IMAP: auto-assign. The method Activities.importMimeMessage() now supports 
      two import modes:
      
      * If the subject line starts with "> " the message is treated as wrapper
        message. All attachments are treated mime messages which are imported instead
        of the message itself. The subject line of the wrapper message has the following
        form: 
        > @<email creator name> [#<activity creator name or activity#>]  <subject>
        The allows the user to specifiy the email creator and an optional activity creator.
        If specified, an activity is created (name = subject, detailedDescription=body) 
        and the imported emails are linked with this activity using linkToAndFollowUp().
      * In any other case the message is imported as is.

      The subject line of all imported messages is scanned for activity numbers. Activity
      numbers have the form #<any string>. If a matching activity is found the imported
      email is linked with this activity using linkToAndFollowUp().


2.1.  FIXED BUGS
      
      CR10009581
      updateInventory() throws NullPointer.      
 
2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.7.0                                                       2010-08-20
==============================================================================

1.    NEW FEATURES

      CR10009455
      Contracts.updateContractState(). Add method updateContractState() to 
      Contracts. This allows a user-specific backend to override this method.
      
      CR10009412
      AirSync Client supported added. A user can create 0..n AirSyncClientProfiles.
      An AirSyncClientProfile allows to specify host url, email, user and password 
      of an AirSync-compliant server (e.g. MS Exchange). The Wizard 'Synchronize Folders' 
      performs a FolderSync and creates SyncFeeds for each of the retrieved folders. 
      Supported are folders of type Contact, Calendar, Tasks and Email. The wizard
      must be invoked each time a folder is added on the server. The user can then 
      assign activity groups and contact groups to SyncFeeds and then invoke the 
      wizard 'Synchronize Items'. The wizard performs a Sync, i.e. synchronizes items 
      stored on on the server with items stored in openCRX. WizardLauncher combined 
      with a tool such as curl allows to automate the sync process.   
      
      CR10009406
      Configurable user-agent for mobiles. The option mobileUserAgents for
      ObjectInspectorServlet in web.xml allows to configure a comma or 
      semi-colon separated list user agent patterns. The GUI will be launched 
      in mobile mode if the user-agent header contains (indexOf() >= 0) one of 
      the configured user agent patterns.  

      CR10009384
      EditDocument Wizard. Wizard which allows to edit the head revision of a 
      text document (contentMimeType.startsWith("text/")) and stores the updated 
      text as new head revision.

2.    CHANGES

2.0.  CHANGED FEATURES
      
      CR10009472
      WorkAndExpenseRecord is a CrxObject. WorkAndExpenseRecord inherits 
      from CrxObject.


2.1.  FIXED BUGS

      SF3060307
      Error due to old xsi:noNamespaceSchemaLocation. An export through the 
      file->export advanced...->xml uses an old namespace schema location 
      xri://+resource/org/opencrx/kernel/activity1/xmi/activity1.xsd. If I 
      use xsi:noNamespaceSchemaLocation=
      "xri://+resource/org/opencrx/kernel/activity1/xmi1/activity1.xsd"
      it works okay.
      
      CR10009486
      SF3047805: MultivaluedFeaturePredicate's throw Exception when used.
      ActivityQuery.contract() should return MultivaluedFeaturePredicate. However, 
      from the model, an Activity's contract has a multiplicity of 1..0 somehow. Hence 
      Jmi1QueryInvocationHandler actually returns an OptionalFeaturePredicate via by 
      RefQuery_1.refGetPredicate(). This conflict results in a ClassCastException, see below.
      I've tried and debugged this with a couple more MultivaluedFeaturePredicate constraints, 
      but got the same result.
      
	  CR1000947
	  References / Lookups. Populating references with the GUI should be possible 
	  by entering an XRI into the appropriate field
	        
      CR10009463
      Turning off unneeded locales leads to NA's. Grid column labels are set 
      to NA if only one locale (locale[0]) is enabled in web.xml.
      
      CR10009400: Depots.refreshReport()
      Queries on shared associations DepotReportItemHasSimpleBooking and 
      DepotReportItemHasSingleBooking are not allowed while creating the report.
      

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.6.0                                                       2010-05-01
==============================================================================

1.    NEW FEATURES

      CR10008982
      Shop Adapter. The shop API (org:opencrx:application:shop1) gives a service-
      oriented access to a subset of the openCRX API. The API allows to manage
      customers, contracts, products, prices and activities. Application clients
      (GUIs, XML-RPC servlets, JSPs, EJBs, ...) can instantiate the shop adapter
      with new org.opencrsx.application.shop1.service.ShopServiceImpl() and then
      use its public methods. The adapter itself delegates to the openCRX API.

      CR10009335
      SSL support for IMAP and LDAP. IMAPServlet and LDAPServlet are configured
      for SSL support as follows:

      * Create cert and key with OpenSSL (e.g. server.key, server.crt)
      * Convert cert and key to PEM format using OpenSSL:
        o Key: openssl rsa -in server.key -out server-key.pem -outform PEM
        o Cert: openssl x509 -in server.crt -out server-cert.pem -outform PEM

      * Use a Java Keytool which allows you to a) create a keystore,
        b) import a certificate, c) import a private key.
        The following tools allow you to easily manage Java keystores:
        o Portecle:    http://sourceforge.net/projects/portecle/
        o KeyTool IUI: http://yellowcat1.free.fr/keytool_iui.html
      * Add init-param to web.xml of IMAPServlet and LDAPServlet as follows:

		<init-param>
		  <param-name>sslKeystoreFile</param-name>
		  <param-value>/var/ssl/keystore.jks</param-value>
		</init-param>
		<init-param>
		  <param-name>sslKeystoreType</param-name>
		  <param-value>JKS</param-value>
		</init-param>
		<init-param>
		  <param-name>sslKeystorePass</param-name>
		  <param-value>changeit</param-value>
		</init-param>
		<init-param>
		  <param-name>sslKeyPass</param-name>
		  <param-value>changeit</param-value>
		</init-param>

      * For IMAPServlet the port should be changed from 1143 to 1443:

		<init-param>
		  <param-name>port</param-name>
		  <param-value>imap:1443</param-value>
		</init-param>

      * For LDAPServlet the port should be changed from 1389 to 1689.

		<init-param>
		  <param-name>port</param-name>
		  <param-value>ldap:1689</param-value>
		</init-param>


      CR10009206
      The AirSync servlet (org.opencrx.application.airsync.server.impl.SyncServlet)
      allows AirSync-capable clients to synchronize with openCRX. The UserSettings
      wizard creates the SyncProfile 'AirSync' which is used by the SyncServlet.
      The SyncServlet synchronizes contacts (Accounts), activities
      (Meeting, Task, EMail) and alerts (EMails).

      CR10009196
      LDAP Server. LDAP server added in org.opencrx.application.ldap. The
      server allows to access contact information using LDAP clients. Below
      is a sample query using ldapsearch:

      ldapsearch -D "guest@Standard" -w guest -h localhost -p 1389 -b "ou=filter/All Accounts,ou=Persons" -l 100 -z 100 -P 3 ""


      CR10008978
      Captcha Servlet. Add servlet which allows to generate Captchas
      (see http://jcaptcha.sourceforge.net/). The GetCaptchaServlet allows to
      get captchas which can be used in JSPs offering openCRX functionality
      for anonymous and non-authenticated users. E.g. AnonymousCreateActivity.jsp
      accepts posts which create activities.

      CR10008958
      Tomcat Connectors: pause / resume. Tomcat extension which allows to start
      multiple Tomcat instances with the same configuration and allow to stop /
      start the connectors of these instances individually.

      The class org.openmdx.catalina.core.ExtendedService allows to handle the
      requested scenario. Adapt the server.xml as follows:

      <Server port="${tomcat.server.port}" shutdown="SHUTDOWN">
      ...
      <Service name="Catalina" port="${tomcat.service.port}" className="org.openmdx.catalina.core.ExtendedService">
      ...

      The system properties are set per Tomcat instance, e.g.

      Instance A:
      * -Dtomcat.server.port=8005
      * -Dtomcat.service.port=8006

      Instance B:
      * -Dtomcat.server.port=8105
      * -Dtomcat.service.port=8106

      If instance A and instance B have to run with different versions of EARs/WARs
      create a Tomcat directory for each instance.

      Start instance A. The connectors are started.
      Start instance B. The connectors can not be started because of port conflicts.

      Switch from instance A to B as follows:
      * telnet localhost 8006. Enter command stopConnectors.
      * telnet localhost 8106. Enter command startConnectors.

      If the property org.openmdx.catalina.core.ExtendedService.autostartConnectors is unset
      or the property is set to true then the connectors will be started at startup of Tomcat.
      Otherwise the connectors are not started.

      CR10008960
      IMAPServer: pause / resume. The IMAPServlet (opencrx-imap-CRX/IMAPServlet) provides a
      simple GUI which allows to pause and resume the IMAPServer. The Wizard IMAPServer.jsp
      available as admin-Root redirects to the IMAPServlet. The IMAPServlet accepts the
      system property org.openmdx.catalina.core.ExtendedService.autostartConnectors.
      If unset or set to true, the IMAPServer is started at startup. If set to false, the
      IMAPServer has to be started manually.

      CR10008961
      WorkflowController: pause / resume. The WorkflowControllerServlet accepts the new
      commands pause and resume. Pause stops pinging the controlled WorkflowServlets.
      The new commands are available via the GUI. The WorkflowControllerServlet accepts
      the system property org.openmdx.catalina.core.ExtendedService.autostartConnectors.
      If it is unset or set to true the WorkflowController is activated on startup. If
      set to false the WorkflowController has to be resumed manually.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10009315
      SubscriptionHandlerServlet. SubscriptionHandlerServlet must use a persistence
      manager which is specific for the subscribing user.

      CR10009198
      PortalExtension: getDataBinding(). The signature of getDataBinding() has changed.
      The parameter ApplicationContext app is removed because data bindings must not
      depend on the application context. The new interface DataBinding_2_0 has been
      added to support data bindings where the application context is passed as
      parameter for setValue(), getValue().

      CR20018907
      Portal: Ajax-based login.
      Login.jsp now first invokes the protected ./jsp/GetPath.jsp. The session
      is not authenticated if GetPath returns the redirect URL to the Login page.
      In this case the Login form is displayed. If GetPath returns the non-redirected
      URL, Login.jsp forwards to the ObjectInspectorServlet without displaying
      the login form. As a consequence /jsp/* must be protected in web.xml.

2.1.  FIXED BUGS

      CR10009299
      Rendering contracts as RTF (cyrillic text).
      Error: workstr.append("\\'" + Integer.toHexString(ch))
      You are encoding UTF character as «\'hh» (h — hexadecimal digit). But in
      RTF format UTF characters are encoded as «\udddd?» (d — decimal digit,
      dddd — shift from beginning of UTF-8 table).
      So, I think that correct version of this statemnet must be:
      workstr.append("\\u" + String.format("%04d", (int)ch) + "?");

      CR10009177
      ICAL: ATTENDEE not updated. ICALs ATTENDEEs are not updated in activity parties
      are added or removed.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.5.3                                                       2009-10-16
==============================================================================

1.    NEW FEATURES

      CR20018858
      Portal: DashboardControl. DashboardControl and wizard which
      allows to manage dashlets.

      CR10008432
      Add GUI mode which is optimized for mobile browsers. Currently tested
      and supported is Safari for iPhone and desktop browsers.

      CR10008878
      EMailRecipientDataBinding. Data binding to manage recipients of EMail activity.
      Here is a sample customizing:

		<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:activity1:EMail:to0">
		      <_object>
			<type>org:opencrx:kernel:account1:EMailAddress</type>
			<multiplicity>0..1</multiplicity>
			<changeable>true</changeable>
		      </_object>
		      <_content/>
		</org.openmdx.ui1.StructuralFeatureDefinition>
		<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:activity1:EMail:to1">
		      <_object>
			<type>org:opencrx:kernel:account1:EMailAddress</type>
			<multiplicity>0..1</multiplicity>
			<changeable>true</changeable>
		      </_object>
		      <_content/>
		</org.openmdx.ui1.StructuralFeatureDefinition>

		...

		<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:activity1:EMail:to0">
		    <_object>
			<dataBindingName>org.opencrx.kernel.portal.EMailRecipientDataBinding?index=0;partyType=220</dataBindingName>
			<active>true</active>
			<filterable>false</filterable>
			<toolTip>
			  <_item>TO</_item>
			</toolTip>
			<label>
			  <_item>TO</_item>
			</label>
			<order>
			  <_item>0</_item>
			  <_item>0</_item>
			  <_item>80</_item>
			</order>
		    </_object>
		<_content/>
		</org.openmdx.ui1.ElementDefinition>
		<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:activity1:EMail:to1">
		    <_object>
			<dataBindingName>org.opencrx.kernel.portal.EMailRecipientDataBinding?index=1;partyType=220</dataBindingName>
			<active>true</active>
			<filterable>false</filterable>
			<toolTip>
			  <_item>TO</_item>
			</toolTip>
			<label>
			  <_item>TO</_item>
			</label>
			<order>
			  <_item>0</_item>
			  <_item>0</_item>
			  <_item>81</_item>
			</order>
		    </_object>
		<_content/>
		</org.openmdx.ui1.ElementDefinition>


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008870
      The schema paths in the ui and code files have to be changed:
      * xri:+resource/org/openmdx/ui1/xmi/ui1.xsd --> xri://+resource/org/openmdx/ui1/xmi1/ui1.xsd
      * xri:+resource/org/opencrx/kernel/code1/xmi/code1.xsd --> xri://+resource/org/opencrx/kernel/code1/xmi/code1.xsd
      Files in custom projects have to be adapted correspondingly. The following commands do the job:
	  * grep -rl 'xri:+resource/org/openmdx/ui1/xmi/ui1.xsd' . | xargs sed -i -e 's/xri:+resource\/org\/openmdx\/ui1\/xmi\/ui1.xsd/xri:\/\/+resource\/org\/openmdx\/ui1\/xmi1\/ui1.xsd/'
      * grep -rl 'xri:+resource/org/opencrx/kernel/code1/xmi/code1.xsd' . | xargs sed -i -e 's/xri:+resource\/org\/opencrx\/kernel\/code1\/xmi\/code1.xsd/xri:\/\/+resource\/org\/opencrx\/kernel\/code1\/xmi1\/code1.xsd/
      Also the _operation tag in the code files have to be fixed:
      grep -rl '_operation=\"create\"' . | xargs sed -i -e 's/_operation=\"create\"/_operation=\"set\"/'

2.1.  FIXED BUGS

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.5.2                                                       2009-09-14
==============================================================================

1.    NEW FEATURES

      CR10008773
      PortalExtension: queries for customized feature definitions. The method
      PortalExtension_1_0.getQuery() allows to specify user-defined queries.
      The method takes as parameter the field and the filter value. Identity
      columns for example require user-defined queries.

      CR10008709
      Favorites with xri of current object. Favorites which are invoked on the
      current object can be defined as follows:
      1. Set favorite's reference to null. The favorite's reference is then
         set to current object.
      2. The macro $XRI is replaced with the XRI of the currently selected object.
         Example:
         window.location.href='./wizards/en_US/CreateWorkAndExpenseRecord.jsp?xri=$XRI';

      CR10008577
      CalDAV servlet added to EAR.

      With iPhone 3 connect as follows:
      1) With standard GUI go to user home of user {login} and create a calendar
         profile {P}.
      2) Attach one are more calendar feeds pointing to an activity group or
         activity filter. Set active to true and background color to some value,
         e.g. #112233.
      3) On iPhone subscribe to calendar with
         url http://host:port/opencrx-caldav-CRX/CRX/Standard/user/{login}/profile/{P}

      With Sunbird connect as follows:
      1) Subscribe to calendar with URL
         http://host:port/opencrx-caldav-CRX/CRX/Standard/tracker/{tracker name}[/filter/{filter name}]

      CR10007844
      Portal: support for Wiki tags. Text fields are rendered client-side using
      Wiky. For more information about features and supported Wiki tags
      see http://goessner.net/articles/wiky/.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008803: isAllDayEvent
      isAllDayEvent is currently modeled as persistent attribute.
      * isAllDayEvent should be derived. It is true, if scheduledStart and scheduledEnd do not
        specify a time, i.e. 00:00:00.000
      * Add operation markAsAllDayEvent() which resets the time of scheduledStart and scheduledEnd.

      CR10008789: Deprecate EJBs
      Deprecate Kernel and Security Dataprovider EJBs in favor of REST plug-ins.

      CR10008788: Rename ContractPosition
      Rename the abstract class ContractPosition to AbstractContractPosition.


2.1.  FIXED BUGS

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.5.1                                                       2009-07-22
==============================================================================

1.    NEW FEATURES

      CR10008599
      Birthday calendars. Generation of birthday calendars added to ICal servlet.
      Sample URL is: http://localhost:8080/opencrx-ical-CRX/bdays?id=CRX/Standard/filter/Accounts~all&alarm=true&max=100
      Parameters:
      * id: account filter.
      * alarm: true|false. Generate alarm tag. Default is false.
      * max: Generate events for max accounts. Default is 500.
      * icalType: VTODO|VEVENT. Default is VEVENT.
      * year: Generate events for years [year-1, year, year+1]. Default is current year.
      * categories: CATEGORIES attribute. Default is Birthday
      * summaryPrefix: Prefix for attribute SUMMARY. Default is ""

      CR10008602
      Redesign Grid Follow-Ups. Add FormattedFollowUpDataBinding which formats
      the fields transition, assignedTo, createdAt, modifiedAt of an ActivityFollowUp.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008700
      Database: improve case-insensitive search. UPPER(column) LIKE UPPER(?)
      does not work for all databases.

      CR10008581
      Upgrade Timeline to version 2.3.0.

2.1.  FIXED BUGS

      SF2808264
      Setup-Problem with 2.5.0 on Tomcat and DB2. OpenCrxSecurity_1 plugin fixed. This
      fixes the following reported errors:
      1) User creation error
      2) Start openCRX with empty database
      3) Change password

      CR10008615
      vCard Importer appends postalStreet. Importing the same vCard multiple
      times leads to unwanted extra lines in postalStreet; it seems that the
      importer just appends the imported lines to postalStreet instead of
      replacing existing lines with the imported lines.

      CR10008609
      ui/code-merge/split broken. Parameter sourceDir ignored/not correctly injected?

      CR10008595
      pg script dbcreate-table.sql of v2.5.0 is no good. Use TIMESTAMP WITH TIME ZONE
      instead of ABSTIME.

2.2   REMOVED FEATURES
      none


==============================================================================
Version 2.5.0                                                       2009-06-08
==============================================================================

1.    NEW FEATURES

      CR10008468
      Final PrincipalGroups. Add flag to mark PrincipalGroups as final. Access
      level deep does not calculate subgroups for final principal groups. isFinal
      can therefore be used to fine-control the behaviour of access level deep.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008468
      Final PrincipalGroups. Add flag to mark PrincipalGroups as final. The access
      control plugin does not subgroups for final principal groups in case of
      accessLevelBrowse=access level deep.

      CR10008467
      Work and Expense record. Extend existing work record so that expenses
      can be stored as well. Wizard CreateWorkAndExpenseRecord which allows
      user-friendly management of work and expense records.

      CR10007950
      Migrate application plugin to openMDX 2 architecture. Backend classes
      in package org.opencrx.kernel.backend are fully rewritten. The backend
      now uses the typed jmi1 openCRX API instead of the deprecated, generic
      openMDX 1 RequestCollection/DataproviderObject API. A backend is now
      organized as library. The methods can be used in wizards, portal
      extensions, data bindings or backend extensions. beClass.getInstance(),
      e.g. Accounts.getInstance() allows an easy-to-use lookup. The standard
      backend classes can be overriden by user-defined implementations.
      This way the standard openCRX business-logic can easily be adapted and
      extended.

      A user-defined backend class can be added as follows:

      1. Write a class which extends one of the standard backend classes,
      e.g. Accounts as follows:

      package com.mycompany.opencrx.backend;

      public class Accounts extends org.opencrx.kernel.backend.Accounts {

	    public static void register(
	    ) {
		    registerImpl(new com.mycompany.opencrx.backend.Accounts());
	    }

        protected Accounts(
        ) {
        }

        ...
      }

      2. Extend the standard Configuration class and register your backend
      class as follows:

      package com.mycompany.opencrx.backend;

      public class Configuration extends org.opencrx.kernel.aop2.Configuration {

	    public Configuration(
        ) {
		   super();
		   com.mycompany.opencrx.backend.Accounts.register();
	    }

      }

      3. Register the configuration class in
      src/ear/opencrx-core-CRX.ear/gateway.jar/META-INF/ejb-jar.xml. This can
      be done by adapting the entry configuration.class.name in the
      build.properties file.


      CR10008417
      Replace openMDX/Log by SLF4J / JDK Logger. The sub-project openMDX/Log is
      not used anymore by openCRX. Tomcat+OpenEJB can therefore be configured
      as follows:
      * Option -Dorg.openmdx.log.config.filename can be removed and corresponding
        log properties file can be removed
      * Update CATALINA_HOME/bin/tomcat-juli.jar from openmdx/jre-1.5/core/lib
      * Update CATALINA_HOME/lib/openmdx-base.jar from openmdx/jre-1.5/core/lib
      * Add slf4j-jdk14-1.5.6.jar to CATALINA_HOME/lib
      * Remove slf4j-openmdx1.jar from CATALINA_HOME/lib
      * Adapt log configuration in CATALINA_HOME/conf/logging.properties to your needs
      * Remove LogConsoleServlet from customized web.xml

2.1.  FIXED BUGS

      SF329844
      So I did a post with the following settings:
      POST http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account/7wmWgCjdEd6ri3Nu6Dapag/member
      <?xml version="1.0"?>
      <org.opencrx.kernel.account1.Member>
        <name>MyName</name>
        <account>xri://@openmdx*org.opencrx.kernel.account1/provider/CRX/segment/Standard/account/NI7XwEIBEd29BeMf4vj8cA</account>
      </org.opencrx.kernel.account1.Member>
      NI7XwEIBEd29BeMf4vj8cA should become a member of 7wmWgCjdEd6ri3Nu6Dapag.
      Anyway, I get a server error, without using the account argument all is fine.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.4.1                                                       2009-03-23
==============================================================================

1.    NEW FEATURES
      none

2.    CHANGES

2.0.  CHANGED FEATURES
      none

2.1.  FIXED BUGS

      SF6884208
      When I run ant script:

      ant -Dformat.source=openmdx2 -Dformat.target=openmdx2
      -Ddb.jdbc.driver.classpath="D:\temp\hsqldb.jar;D:\temp\ojdbc14.jar"
      -Ddb.jdbc.url.source="jdbc:hsqldb:hsql://127.0.0.1:9001/CRX_2_4"
      -Ddb.jdbc.driver.source="org.hsqldb.jdbcDriver" -Ddb.username.source="sa"
      -Ddb.password.source="manager99"
      -Ddb.jdbc.url.target="jdbc:oracle:thin:@localhost:1521:XE"
      -Ddb.jdbc.driver.target="oracle.jdbc.driver.OracleDriver"
      -Ddb.username.target="CRX_CRX" -Ddb.password.target="123" CopyDb

      I get an error: [java] java.lang.NoClassDefFoundError:
      org/openmdx/kernel/application/client/Launch

      SF6853479
      I tried http://www.opencrx.org/opencrx/2.3/new.htm#REST in 2.3 it is ok. But
      in 2.4 I get an error:

      javax.servlet.ServletException: Servlet.init() for servlet RestServlet threw exception
	      org.apache.openejb.tomcat.catalina.OpenEJBValve.invoke(OpenEJBValve.java:45)
	      org.apache.openejb.tomcat.catalina.OpenEJBValve.invoke(OpenEJBValve.java:45)
	      org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
	      org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	      org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
	      org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:857)
	      org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:565)
	      org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1509)
	      java.lang.Thread.run(Thread.java:595)

      root cause

      java.lang.NoClassDefFoundError:
      org/openmdx/application/dataprovider/transport/ejb/cci/Jmi1AccessorFactory_2org.openmdx.application.rest.RestServlet.getPersistenceManagerFactory(RestServlet.java:1317)
	      org.openmdx.application.rest.RestServlet.init(RestServlet.java:1338)
	      org.apache.openejb.tomcat.catalina.OpenEJBValve.invoke(OpenEJBValve.java:45)
	      org.apache.openejb.tomcat.catalina.OpenEJBValve.invoke(OpenEJBValve.java:45)
	      org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
	      org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	      org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
	      org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:857)
	      org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:565)
	      org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1509)
	      java.lang.Thread.run(Thread.java:595)


2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.4.0                                                       2009-03-06
==============================================================================

1.    NEW FEATURES

      CR10008389
      Notifications as RSS feed. NewsServlet added.

      CR10008279
      User interface that is more intuitive to use. Added the following
      wizards:
      * CreateProjectWizard
      * CreateActivityWizard
      * ScheduleEventWizard / VoteForEvent
      * CreateProductWizard
      * CreateContractWizard
      * CreateLeadWizard
      * CreateContactWizard

      CR10008309
      Forms: allow to define forms which are composed from customized fields.
      A form consists of a set of field groups and a field group of a set
      of fields. A field definition is specified by the class name and
      feature name of a modeled, customized field and a field order. Below
      is a sample definition:

			<?xml version="1.0" encoding="UTF-8"?>
			<org.openmdx.base.Authority xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="org:openmdx:ui1" xsi:noNamespaceSchemaLocation="xri://+resource/org/openmdx/ui1/xmi/ui1.xsd">
			  <_object/>
			  <_content>
			    <provider>
			      <org.openmdx.base.Provider qualifiedName="MDX" _operation="null">
			        <_object/>
			        <_content>
			          <segment>
			            <org.openmdx.ui1.Segment qualifiedName="Root" _operation="null">
			              <_object/>
			              <_content>
						            <org.openmdx.ui1.FormDefinition name="ProductBasePriceForm">
						              <_object>
						                <title>
						                  <_item>Product Price</_item>
						                </title>
						                <toolTip>
						                  <_item>Product Price</_item>
						                </toolTip>
						              </_object>
						              <_content>
						                <formFieldGroupDefinition>
						                  <org.openmdx.ui1.FormFieldGroupDefinition name="ProductBasePriceInformation">
						                    <_object>
						                      <label>
						                        <_item>Product Price</_item>
						                      </label>
						                      <order>10</order>
						                      <columnBreakAtElement>
						                        <_item>4</_item>
						                        <_item>8</_item>
						                      </columnBreakAtElement>
						                    </_object>
						                    <_content>
						                      <formFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="usage">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>usage</featureName>
						                            <order>100</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="priceLevel">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractPriceLevel</forClass>
						                            <featureName>basedOn</featureName>
						                            <order>200</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="price">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>price</featureName>
						                            <order>300</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="quantityFrom">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>quantityFrom</featureName>
						                            <order>400</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="quantityTo">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>quantityTo</featureName>
						                            <order>500</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="discountIsPercentage">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>discountIsPercentage</featureName>
						                            <order>600</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                        <org.openmdx.ui1.FormFieldDefinition id="discount">
						                          <_object>
						                            <forClass>org:opencrx:kernel:product1:AbstractProductPrice</forClass>
						                            <featureName>discount</featureName>
						                            <order>700</order>
						                          </_object>
						                          <_content />
						                        </org.openmdx.ui1.FormFieldDefinition>
						                      </formFieldDefinition>
						                    </_content>
						                  </org.openmdx.ui1.FormFieldGroupDefinition>
						                </formFieldGroupDefinition>
						              </_content>
						            </org.openmdx.ui1.FormDefinition>
						          </formDefinition>
			              </_content>
			            </org.openmdx.ui1.Segment>
			          </segment>
			        </_content>
			      </org.openmdx.base.Provider>
			    </provider>
			  </_content>
			</org.openmdx.base.Authority>

      The form can then be used in a wizard as follows:

			1. Get the form
			org.openmdx.ui1.jmi1.FormDefinition productBasePriceFormDefinition = app.getUiFormDefinition("ProductBasePriceForm");
			org.openmdx.portal.servlet.control.FormControl productBasePriceForm = new org.openmdx.portal.servlet.control.FormControl(
				formDefinition.refGetPath().getBase(),
				app.getCurrentLocaleAsString(),
				app.getCurrentLocaleAsIndex(),
				app.getUiContext(),
				productBasePriceFormDefinition
			);

			2. Read the fields from an HttpRequest into a field value map
			Map formValues = new HashMap();
			productBasePriceForm.updateObject(
				request.getParameterMap(),
				formValues,
				app,
				pm
			);

			3. Paint the form
			form.paint(
				p,
				null, // frame
				true // forEditing
			);
			p.flush();


      CR10008349
      Support for OpenEJB. Setup is done as follows:

			From Apache get:
			* tomcat 6.0.18

			From openMDX get:
			* openmdx-openejb.war
			  openmdx-openejb.war is the original openejb.war from Apache OpenEJB with the
			  following modifications:
			  - Patch for TomcatWebAppBuilder which allows to load context.xml files from
			    WebApps META-INF
			  - Patch for MailSessionFactory which allows to use multiple mail sessions
			  - Deployment factory for in-process deployment, log stream for slf4j.
			* openmdx-kernel.jar
			* catalina.jar which contains ExtendedJDBCRealm
			* tomcat-juli.jar which contains xri protocol handler
			* slf4j-openmdx1.jar

			From openCRX get:
			* opencrx-core-CRX.ear

			Installation
			* Unzip Tomcat
			* Copy openmdx-openejb.war to webapps and rename to 0-openejb.war. This asserts
			  that openejb.war is the first WebApp deployed by tomcat
			* Copy openmdx-kernel.jar, catalina.jar, slf4j-openmdx1.jar, database driver jars to lib
			* Copy tomcat-juli.jar to bin
			* Create directory apps (same dir level as webapps) and copy opencrx-core-CRX.ear to apps
			* Copy openejb.xml to conf. Adapt JDBC resource.
			* Add users to tomcat-users.xml
			* Start Tomcat with the same -D options as Tomcat+LWC.

			Configuring Security Realm with in opencrx-core-CRX.ear
			The WebApps in opencrx-core-CRX.ear have a context.xml located in the META-INF
			directory of each WebApp. The Realm is configured by setting the following
			environment variables (-D option):
			-Dopencrx.CRX.jdbc.driverName="org.postgresql.Driver"
			-Dopencrx.CRX.jdbc.url="jdbc:postgresql://127.0.0.1:5432/CRX_2_4"
			-Dopencrx.CRX.jdbc.userName="postgres"
			-Dopencrx.CRX.jdbc.password="..."


2.    CHANGES

2.0.  CHANGED FEATURES

			CR10008387
			Migrate models to RSM 7.5.

      CR20018534
      Replace JPOX by OpenJPA. The model mapper now generates JPA compliant
      persistence classes and a default persistence mapping (orm.xml). The
      JDO2 mapping is not supported anymore. The ant build-library provides
      the following targets:
      * enhance: enhances the classes listed in orm.xml
      * create-schema: orm.xml --> openjpa-schema.xml
      * create-sql: openjpa-schema --> sql build and upgrade script

2.1.  FIXED BUGS
      none

2.2   REMOVED FEATURES
      none

==============================================================================
Version 2.3.0                                                       2008-12-03
==============================================================================

1.    NEW FEATURES

      CR0003539
      Ui perspectives. Perspectives allow to modify the Root UI customizing.
      A perspective overrides the Root customizing, i.e. a perspective inherits
      all UI element definitions from the Root customizing. The WEB-INF/config/ui
      directory structure looks as follows:

      WEB-INF/config/ui
          Root
              locale 0
              locale 1
              ...
          {1-Perspective A}
              locale 0
              locale 1
              ...
          {2-Perspective B}
              locale 0
              locale 1
              ...

      The name of a Perspective must be of the form {order}-{name}, e.g.
      1-Guest, 2-BackOffice, 3-FrontOffice, 4-Mgmt. The order defines in
      which order the perspectives are rendered in the perspective selector
      in the GUI. Root has the predefined order 0.

      CR10008205
      REST servlet added to openCRX/Core. The servlet allows easy 3rd party
      integration with openCRX. The full functionality of the openCRX API
      can be accessed via rest requests. See See http://code.google.com/p/rest-client/
      for a REST client. Below are some sample requests:

			Object creation
			  Method: POST
			  Url: http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account
			  Body:
					<?xml version="1.0"?>
					<org.opencrx.kernel.account1.Contact>
						<lastName>REST</lastName>
						<firstName>Test #1</firstName>
					</org.opencrx.kernel.account1.Contact>

			Object Retrievals
			  Method: GET
			  Urls:
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/extent?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=identity().like(%22xri://@openmdx*org.opencrx.kernel.account1/provider/CRX/segment/Standard/account/%25%22);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=modifiedAt().between(:datetime:20080101T000000.000Z,:datetime:20081001T000000.000Z);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=modifiedAt().greaterThan(:datetime:20080101T000000.000Z);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsModifiedAt().greaterThan(:date:2008-01-01);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsNumberOfChildren().greaterThan(:integer:-1);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsNumberOfChildren().lessThan(0);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsNumberOfChildren().lessThan(3);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsFullName().like(%22D%25,%20Joe%22);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsFirstName().elementOf(%22Joe%22,%22Guest%22);orderByFirstName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsFirstName().equalTo(%22Guest%22);orderByLastName().ascending()
					http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account?position=0&size=50&queryType=org:opencrx:kernel:account1:Contact&query=thereExistsFirstName().equalTo(%22Guest%22)

			Object modification
				Method: PUT
				Url: http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account/2YlAOJYlEd2Y4zv65ePspg
				Body:
					<?xml version="1.0"?>
					<org.opencrx.kernel.account1.Contact>
						<preferredContactMethod>1</preferredContactMethod>
					  <preferredSpokenLanguage>1</preferredSpokenLanguage>
					</org.opencrx.kernel.account1.Contact>

			Operation Invocation
				Method: POST
				Url: http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/guest/sendAlert
				Body:
					<?xml version="1.0"?>
					<org.opencrx.kernel.base.SendAlertParams>
						<toUsers>guest</toUsers>
						<name>Test REST</name>
					  <importance>0</importance>
					</org.opencrx.kernel.base.SendAlertParams>

			Object Deletion
				Method: DELETE
				Url: http://localhost:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account/2YlAOJYlEd2Y4zv65ePspg


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008288
      memberRole is embedded. The attribute Member.memberRole should be configured
      as embedded, i.e. move the column from table OOCKE1_ACCOUNTASSIGNMENT_ to
      OOCKE1_ACCOUNTASSIGNMENT.


2.1.  FIXED BUGS
      none

2.2   REMOVED FEATURES
      none


==============================================================================
Version 2.2.1                                                       2008-10-14
==============================================================================

1.    NEW FEATURES

      CR10008166: FormattedNoteDataBinding
      DataBinding which allows to format Title / Text of a Note. This allows to
      improve the customizing of grids containing notes. The data binding
      concatenates title and text of a Note to one string separated by a <br />.
      The title is set to bold. The title is filled up with &nbsp; according
      to the longest line of the text up to a maximum of 140 characters.

      Here is an example which shows how to configure the column 'formattedNote'
      of an ActivityFollowUp:

      1. Configure a feature definition for formattedNote:

			<org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:activity1:ActivityFollowUp:formattedNote">
				<_object>
				  <type>org:w3c:string</type>
				  <multiplicity>0..1</multiplicity>
				  <changeable>false</changeable>
				</_object>
				<_content/>
				</org.openmdx.ui1.StructuralFeatureDefinition>
			</featureDefinition>

      2. Configure an element definition for formattedNote:

			<org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:activity1:ActivityFollowUp:formattedNote">
				<_object>
					<active>true</active>
					<toolTip>
						<_item>Title / Text</_item>
					</toolTip>
					<label>
						<_item>Title / Text</_item>
					</label>
					<order>
						<_item>90</_item>
						<_item>70</_item>
						<_item>10</_item>
					</order>
					<orderObjectContainer>
						<_item>0</_item>
						<_item>10</_item>
						<_item>0</_item>
					</orderObjectContainer>
					<dataBindingName>org.opencrx.kernel.portal.FormattedNoteDataBinding</dataBindingName>
				</_object>
				<_content/>
			</org.openmdx.ui1.ElementDefinition>


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008163
      home1: replace Chart by Media. Replace class Chart by Media.


2.1.  FIXED BUGS
      none


2.2   REMOVED FEATURES
      none


==============================================================================
Version 2.2.0                                                       2008-09-02
==============================================================================

1.    NEW FEATURES

      CR10008105
      SecureObject: replaceOwningGroup().	Operation replaceOwningGroup allows
      to replace the owning groups of an object by a given set of groups.

      CR10008103
      Workflow for scanning documents. Workflow which allows to scan a fs
      directory and its subdirs for files and map them to Documents and
      DocumentFolders. The DocumentScannerServlet is configured in web.xml
      as follows:
      * init-param for WorkflowController
        <init-param>
          <param-name>path[3]</param-name>
          <param-value>/DocumentScannerServlet</param-value>
        </init-param>
      * Servlet declaration
        <!-- DocumentScannerServlet -->
        <servlet id="DocumentScannerServlet">
          <servlet-name>DocumentScannerServlet</servlet-name>
          <servlet-class>org.opencrx.application.document.DocumentScannerServlet</servlet-class>
        </servlet>
      * Mapping
        <servlet-mapping>
          <servlet-name>DocumentScannerServlet</servlet-name>
          <url-pattern>/DocumentScannerServlet/*</url-pattern>
        </servlet-mapping>
      The workflow accepts the following component configuration options:
      * scanDir: directory to be scanned for documents
      * urlPrefix: Document revisions are created of type ResourceIdentifier. The
        url of the resource identifier is set to urlPrefix + current directory
        name within scanDir + document name
      * groups: List of principal groups. owningGroup of all created objects is
        set to the specified list of principal groups.
      All options are multi-valued, i.e. can have an index suffix [0]..[9].

      CR10008084
      DocumentFolderAssignment. Allow CrxObjects to be assigned to
      document folders. Document folders show assigned objects.

      CR10007776
      Contract extensions:
      * AccountAssignmentContract added
      * ContractLinkTo, ContractLinkFrom added

      CR10008056
      SendMailWorkflow supports mail gateway. Email activities allow to set
      a gateway address. The gateway address is used for addresses which
      are not of type EMailAddress (e.g. PhoneNumbers). In this case a
      the address is converted to an email address as follows:
      * take address (e.g. phoneNumberFull in case of phone numbers)
      * Remove any characters except digits and letters
      * append domain part of gateway address
      E.g. the phone number +41441112233 is converted to the email address
      _41441112233@fax-gateway.opencrx.org if the domain address is set to
      the email address noreply@fax-gateway.opencrx.org.


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10008134
      Email importer: mapping of unassignable recipients. Email addresses which
      can not be mapped to a valid recipient are mapped to the EMailAddress
      'UNASSIGNED' if available.

      CR10008086
      AccessControl: Caching
      * Cached objects should have a time-to-live (TTL)
      * Any object modification must remove object from cache
      * Cache must be shared by ejb multiple instances

      CR10008032
      AddressBook supports mobile devices. Optimize the AddressBook
      wizard for mobile devices.

      CR10008009
      Migrate ICalServlet, VCardServlet, IMAPServer. Migrate ICalServlet,
      VCardServlet, IMAPServer from openCRX/Groupware to openCRX/Core.


2.1.  FIXED BUGS
      none


2.2   REMOVED FEATURES

      CR10008065
      Deprecate Mms, Sms and Fax activities. Mms, Sms and Fax activities are
      replaced by Email activities.


==============================================================================
Version 2.1.0                                                       2008-07-10
==============================================================================

1.    NEW FEATURES

      CR10007866
      Keep track of the last applied ActivityCreator of an activity. Add
      reference Activity.lastAppliedCreator. ActivityCreator.newActivity()
      and Activity.reapplyActivityCreator() updates the reference.

      CR10007849
      Product filters. Add global product filters.

      CR10007845
      Contract filters. Add global contract filters.

      CR10007754
      SegmentSetup wizard. The wizard allows the segment administrator to create
      all required objects for:
      * Activity management
      * Topics and Workflows
      * Groupware clients
      * User management
      * Product management
      * Contract management

      CR0003145
      Reporting - Incident. Each object offers the operation exportItem(). The
      parameters are:
      * itemMimeType: this parameter specifies the export format. Supported
        formats are text/xml and application/x-excel.
      * referenceFilter: allows to specify which references are traversed
        starting from the object to be exported. This is a comma-seperated
        list of either qualified or unqualified reference names.

      Examples:
      * Export of an Account with its addresses, assigned activities and
        assigned contracts:
        'address, assignedContract, position, assignedActivity, followUp'
      * Export of an invoice with details:
        'position, customer, address, uom, salesTaxType, org:opencrx:kernel:product1:ProductDescriptor:product'
      * Export of filtered accounts specified by an AccountFilter:
        'filteredAccount, address'

      The Excel-Export creates a sheet for each exported object type. Object
      attributes can be accessed as shown in the following examples:

      // IDX=0
      = VLOOKUP(cell containing sales tax xri; SalesTaxType.DATA; MATCH("rate"; SalesTaxType.COLUMN;0); 0)

      // IDX=1
      = VLOOKUP(cell containing sales tax xri & "*1"; SalesTaxType.DATA; MATCH("rate"; SalesTaxType.COLUMN;0); 0)

      // IDX=0
      = VLOOKUP(cell containing account xri; Account.DATA; MATCH("fullName"; Account.COLUMN;0); 0)

      CR10007780
      AccountMemberships are a recursive list of account assignments for a
      given account. The set of account memberships is calculated by a
      database view. AccountMemberships fulfill the following conditions
      for a given account A:
      * distance == 1, accountFrom=A, accountTo=B
        --> there exists a relationship from A to B
      * distance == 2, accountFrom=B, accountTo=C
        --> there exists a relationship from A to B and B to C
      * etc.
      * distance == -1, accountFrom=B, accountTo=A
        --> there exists a relationship from B to A
      * distance == -2, accountFrom=C, accountTo=B
        --> there exists a relationship from C to B and B to A
      * etc.

      CR10007777
      XFN Graphing. The following wizards are added to the Accounts menu:
      * AccountMembershipGraph.jsp: graph showing the relationships of accounts using the
        JIT library (for more info see http://www.thejit.org).
      * Relationships.jsp. Calculates the shortest path between two accounts.

      CR10007739
      Add support for HSQLDB 1.8. Scripts and connectors added to src/connector
      and src/sql (see openCRX SDK).

      CR10007604
      Add multi-valued attributes Account::extCode20-29.


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10007720
      DepotReportItemPosition. Add balanceSimple and balanceSimpleBop. balance =
      balanceCredit - balanceDebit and balanceBop = balanceCreditBop - balanceDebitBop.

      CR10007615
      Extend AccountMembership. The following Account assocations are deprecated:
      * ContactHasDeputy
      * ContactHasAssistant
      * ContactReportsToContact
      Use account members instead.

      CR10007628
      PortalExtension: exclude disabled objects in autocomplete lookups. Disabled
      objects should not be included in the result set of autocompletion lookups.
      Extend PortalExtension.getFindObjectsBaseFilter() correspondingly.

      CR10007613
      VCard: unnecessary updates on addresses. When importing VCards all
      existing addresses are retrieved for modification and marked as dirty even
      if the VCard does not contain matching addresses.

      CR10006424
      Default position name in openDepotPosition() should be based on
      Product::productNumber instead of Product::name.


2.1.  FIXED BUGS

      CR10007712
      reprice. The operation AbstractContract.reprice() resets manually set
      ContractPosition.discountIsPercentage and discount.

      CR10007603
      PriceLevel: calculatePrices for base price levels. A price level is a
      base price level if basedOn.isEmpty(). The current implementation with
      !basedOn.isEmpty() results in a wrong retrieval of prices assigned to a
      base price level. As a result the base price level is added to all prices
      of the filtered products.


2.2   REMOVED FEATURES
      None


==============================================================================
Version 2.0.0                                                       2008-02-20
==============================================================================

1.    NEW FEATURES

      CR10006537
      openCRX on Tomcat. Allow to deploy openCRX on Tomcat only using LWC. See
      Tomcat installation guide for more information.

      CR10006597
      depot1: SimpleBooking. A SimpleBooking allows lightweight recording of
      any kind of quantities on depot positions.

      CR10006574
      Extend Price Levels. Allow to have different types of price levels.
      Currently suppported are:
      * Price level with absolute start and end date
      * Price level with start date relative to product phases

      CR10006428
      Activities provide generic reference to CrxObjects. InvolvedObject allows
      to attach any CrxObject to activities. The role of the relationship can
      be specified.

      CR10006522
      UserSettings wizard. Add wizard which allows management of user settings.

      CR10006494
      Add Address book wizard. The wizard provides simple management of contacts
      and addresses.

      CR10006521
      FilteredActivitiesDataBinding. Add a data binding which allows to access
      collections of filtered activities.

      An example UI definition looks as follows: Definition of structural feature
      which is a reference of type org:opencrx:kernel:Activity:

      <featureDefinition>
        <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:home1:UserHome:tracker!${USER}~Private!filteredActivity">
          <type>org:opencrx:kernel:activity1:Activity</type>
          <multiplicity>0..n</multiplicity>
          <changeable>false</changeable>
          <isReference>true</isReference>
        </org.openmdx.ui1.StructuralFeatureDefinition>
      </featureDefinition>

      The feature name is of the form className:id of filtered activities
      container!filteredActivity. The id of the filtered activites container is of
      the form (tracker|milestone|category)!name[!filter!name] or globalfilter!name.
      The macro ${USER} is replaced by the current user name. The structural feature
      definition can be used in element definitions as follows:

      <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:home1:UserHome:tracker!${USER}~Private!filteredActivity">
        <_object>
          <active>true</active>
          <changeable>false</changeable>
          <toolTip>
            <_item>Private Activities</_item>
          </toolTip>
          <label>
            <_item>Private Activities</_item>
          </label>
          <order>
            <_item>0</_item>
            <_item>0</_item>
            <_item>3</_item>
          </order>
          <maxMember>5</maxMember>
          <dataBindingName>org.opencrx.kernel.portal.FilteredActivitiesDataBinding</dataBindingName>
        </_object>
        <_content/>
      </org.openmdx.ui1.ElementDefinition>


      CR0003427
      Search Wizard / ObjectFinder / IndexerServlet. The new (groovy based)
      root menu control provides a search input field which allows to perform
      keyword / index based search on objects stored in openCRX. The root menu
      is customized in ./core/src/data/org.opencrx/control/userwest. The control
      invokes the search wizard ./core/src/data/org.opencrx/wizards/en_US/Search.jsp
      which in turn takes the query string and creates a corresponding ObjectFinder
      on the user home and navigates to it. The object finder lists all index
      entries which match the query. Index entries are updates by the Indexer
      servlet which is implemented as workflow and is controlled by the
      WorkflowControllerServlet. The IndexerServlet indexes all objects which do
      not have an IndexEntry which is newer than the modification date of the
      object. The IndexerServlet creates an index by invoking the operation
      updateIndex() on the object to be indexed.

      CR10006498
      Model: The class ActivityFilterProperty is extendded as follows:
      * add AssignedToFilterProperty
      * In case no values for scheduled start and scheduled end are specified
        for ScheduledStartFilterProperty and ScheduledEndFilterProperty,
        respectively, the current date is used as filter value. offsetInHours
        allows to shift the date.

      CR10006511
      Portal: queries in XML filters. Queries can be defined in XML filters
      with the PiggyBackCondition. Here is an example:

      <object class="org.openmdx.base.query.PiggyBackCondition">
        <void property="quantor">
          <short>1</short>
        </void>
        <void property="feature">
          <string>context:BP96MI-GEdu0Lr3K4tC9bQ:object_class</string>
        </void>
        <void property="fulfil">
          <boolean>true</boolean>
        </void>
        <void property="value">
          <array class="java.lang.String" length="1">
            <void index="0">
              <string>org:openmdx:compatibility:datastore1:QueryFilter</string>
            </void>
          </array>
        </void>
      </object>
      <object class="org.openmdx.base.query.PiggyBackCondition">
        <void property="quantor">
          <short>1</short>
        </void>
        <void property="feature">
          <string>context:BP96MI-GEdu0Lr3K4tC9bQ:clause</string>
        </void>
        <void property="fulfil">
          <boolean>true</boolean>
        </void>
        <void property="value">
          <array class="java.lang.String" length="1">
            <void index="0">
              <string>EXISTS (SELECT 0 FROM OOCKE1_ACCOUNT a WHERE v.sales_rep = a.object_id AND UPPER(a.full_name) LIKE '%MEIER%'</string>
            </void>
          </array>
        </void>
      </object>

      * The feature name 'context:$uuid:object_class' corresponds to the feature name
        'object_class' with the context prefix context:$uuid. The value of the feature
        must be 'org:openmdx:compatibility:datastore1:QueryFilter'. The value is
        used by the database plugin and is used to trigger query filters.
      * The feature 'context:$uuid:clause' allows to specify the filter clause as
        SQL clause. The clause should be in ANSI SQL. This way the filter is database
        independent. E.g. use the ANSI SQL function CURRENT_TIMESTAMP to get the current
        date and not any DB-specific function.
      * $uuid must be replaced by any UUID, e.g. BP96MI-GEdu0Lr3K4tC9bQ.


2.    CHANGES

2.0.  CHANGED FEATURES

      CR10006610
      account1: codes for address usage.

      CR10006605
      Move ContractRole to segment-level. ContractRole is at segment-level and
      not composite to ContractReferenceHolder anymore. This allows to perform
      global searches on contract roles, e.g. return all contract roles of
      account A.

      CR10006609
      account1: move UnspecifiedAccount.ext... to Account. Move all ext...
      attributes of class UnspecifiedAccount to class Account.

      CR10006600
      depot1: assertReports() takes bookingStatusThreshold as parameter.
      assertReports() takes bookingStatus as parameter. This allows to include
      bookings in the depot reports matching the specified booking status. The
      previous implementation allowed to include bookings with status processed
      only.

      CR10006599
      account1: generalize GroupMembership. Generalize GroupMembership so that
      any account can have members and the memberships are listed at account
      level. At the same time deprecate the relationships Account.partner,
      Account.contact and the class ContactRelationships.

      CR10006598
      depot1: createBooking() operations take the booking origin as parameter.

      CR10007446
      product1: Reorg product offerings. The classes below are removed from
      the model. A future version of openCRX will provide a simpler model
      and implementation for structured products and contract positions.

      product1
      ========
      ProductOffering
      ComplexProductBundleType
      ProductBundleType
      BundledProductType
      ProductBundleContainer
      AbstractProductBundle
      AbstractBundledProduct
      BundledProduct
      ProductBundle
      ComplexProductBundle
      ChangeOrderParams
      AssignProductParams
      ProductPosition
      ProductOfferingPosition
      ProductBundlePosition
      ComplexProductBundlePosition
      BundledProductPosition
      EditableProductOfferingPosition
      SelectableItem
      SelectableItemWithQuantity
      SelectableBundledProduct
      SelectableProductBundle
      SelectableComplexProductBundle
      SelectableProductConfiguration
      PriceOverrideEnabled

      contract1
      =========
      InvoiceBundledProductPosition
      InvoiceComplexProductBundlePosition
      InvoiceProductBundlePosition
      InvoiceProductOfferingPosition
      OpportunityBundledProductPosition
      OpportunityComplexProductBundlePosition
      OpportunityProductBundlePosition
      OpportunityProductOfferingPosition
      QuoteBundledProductPosition
      QuoteComplexProductBundlePosition
      QuoteProductBundlePosition
      QuoteProductOfferingPosition
      SalesOrderBundledProductPosition
      SalesOrderComplexProductBundlePosition
      SalesOrderProductBundlePosition
      SalesOrderProductOfferingPosition
      CreateProductOfferingPositionParams
      CreateProductOfferingPositionResult

      depot1
      ======
      BundledProductDepotPosition
      ProductBundleDepotPosition
      ComplexProductBundleDepotPosition
      ProductOfferingDepotPosition


      CR10006548
      Migrate application plugin to OperationAwarePlugin_1. As a consequence
      the plugin is split as follows:
      * the classes in package org.opencrx.kernel.backend contain the
        business logic of openCRX
      * The classes in the packages org.opencrx.kernel.application.* contain
        the classes which dispatch operation requests to the backend classes
      * The compatibility plugin OpenCrxKernel_1 is still responsible for
        create, replace, get and find requests. However it does not handle
        operation requests anymore.
      To be done
      * Migrate the backend to jmi1/cci2. Get rid of DataproviderObjects.
      * Migrate OpenCrxKernel_1 to be fully OO. Instead of an
        OperationAwarePlugin_1 it should be a Plugin_1.

      CR10006543
      Migrate to cci2/jmi1 bindings. Migrate the openCRX APIs from the Java 1.4
      compliant cci binding to the Java 5 compliant jmi1/cci2 binding. Migration
      of client code (wizards, remote clients, reports, user-specific GUIs, ...)
      is straight forward. The wizards delivered in openCRX/Core and the
      openCRX/Store application show how to migrate to the new APIs.

      CR10006529
      Merge Web.ear and App.ear. Merge Web.ear and App.ear to one single EAR.
      The merge a) improves performance (use of local refs) and b) simplifies
      deployement.

      CR10006523
      JVM local ui repository. Migrate deployment to JVM local ui repository.
      The ui provider is local to the ObjectInspectorServlet which has the
      following advantages a) performance improvement, b) no conflicts in case
      of multiple instances of ObjectInspectorServlet with different ui configurations.

      CR10006474
      activity1: calculation of actual effort. For performance reasons, the calculation
      of ActivityGroup.actualEffort should be calculated by an operation instead by derived
      attributes.

      CR10006414
      AccessControl: missing owner filter for extent queries. AccessControl
      does now add owner filter property in case of extent queries.

      CR10006493
      Change package name org.opencrx.kernel.gui.generic.servlet to
      org.opencrx.kernel.portal.


2.1.  FIXED BUGS
      None

2.2   REMOVED FEATURES
      None


==============================================================================
Version 1.11.0                                                      2006-08-26
==============================================================================

1.    NEW FEATURES

      CR0003572
      Portal: Navigate to created object. The operation
        public RefObject_1_0 handleOperationResult(
            RefObject_1_0 target,
            String operationName,
            RefStruct params,
            RefStruct result
        ) throws ServiceException;
      of PortalExtension_1_0 allows to control the behaviour of the navigation
      after the execution of an operation. If an object is returned, a view
      is rendered and shown to the user. If null is returned the current view
      is shown, i.e. no navigation is performed. E.g. if an operation creates a
      new object and returns it as operation result this feature allows to
      navigate to a newly created object.

      CR10006351
      Portal: localized filters. Localize the auto-generated class filters.
      Locale-specific labels for customized filters are defined by setting
      the label property in the filter definition file, e.g.

      <void property="label">
        <array class="java.lang.String" length="5">
          <void index="0">
            <string>filter label for locale 0</string>
          </void>
          <void index="1">
            <string>filter label for locale 1</string>
          </void>
          <void index="2">
            <string>filter label for locale 2</string>
          </void>
          <void index="3">
            <string>filter label for locale 3</string>
          </void>
          <void index="4">
            <string>filter label for locale 4</string>
          </void>
        </array>
      </void>

      If no labels are specified, label 0 is set to the filter name.

      CR10006348
      IndexerServlet scans modified objects and update its index. The servlet is
      triggered periodically by the WorkflowController. Each run indexes at
      most one hundered objects. The set of objects to be indexed is determined by
      retrieving the audit entries not visited by IndexerServlet. This way
      the index is updated incrementally, i.e. only modified or newly created
      objects are indexed.

      CR10006350
      Portal: wizards and reports in operation menu. Allow to customize wizard
      and report definitions so that they appear as menu entries in the operations
      menu. Only non-customized wizards and reports should appear in the menu
      'Wizards' and 'Reports'.

      Wizards and reports can be customized as operations as follows:

      1. Add an OperationDefinition to the ui customizing files, e.g.

         <featureDefinition>
           <org.openmdx.ui1.OperationDefinition qualifiedName="org:opencrx:kernel:account1:Contact:showMaps">
             <_object>
               <isQuery>true</isQuery>
             </_object>
             <_content/>
           </org.openmdx.ui1.OperationDefinition>
         </featureDefinition>

      2. Set order tag in wizard or report definition to the fully qualified operation name, e.g.

         <meta name="order" content="org:opencrx:kernel:account1:Contact:showMaps">

      The operation org:opencrx:kernel:account1:Contact:showMaps can be customized
      the same way as a modeled operation.

      CR10006239
      Portal: height (125 pixels) and width (230 pixels) of the panels
      North and West should be customizable. PageEpilogControl offers the new public
      methods
      * setPanelSizeNorth(int newValue)
      * setPanelSizeWest(int newValue)
      which allow to set the panel sizes for the north and west pane. The panel
      sizes can be set in the layout JSPs, e.g. show-Default.jsp for the default
      layout.

      CR10006268
      address1: postalStreetNumber allows to store the street number as
      a separate field in addition to postalStreet where the street number
      is stored in formatted form.

      CR10006271
      Add query filter property. AccountQueryFilterProperty,
      ActivityQueryFilterProperty and ProductQueryFilterProperty added. Query
      filter properties allow to specify a SELECT clause which is forwarded
      to the database plugin and added to the WHERE clause as SELECT ...
      WHERE <query filter clause> AND <other criteria>. Here is an example
      for an account filter:

      Account query filter property:
      name:
        Accounts living or working in 'Z%'
      clause:
        object_id IN (SELECT acct.object_id FROM OOCKE1_ACCOUNT acct
        INNER JOIN OOCKE1_ADDRESS addr ON addr.p$$parent = acct.object_id
        WHERE addr.postal_city LIKE ?s0)
      stringParam:
        Z%

      The grid Accounts->Account Filters->Filtered Accounts returns all
      accounts matching the filter clause.

      CR10006248
      Add support for Jonas 4 (for more information see application server
      installation guides).

      CR10006259
      building1: add inventory item. Inventory items are items which have a
      location (in buildings) and may have relationships to other items
      and facilities.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10006319
      WfAction in ActivityProcessTransition
      ActivityProcessTransition allows to configure an error state (errState).
      The activity is set to the error state if the execution of any of the
      configured actions fails. In case of WfAction the following cases are
      handled:
      * Workflows.executeWorkflow() throws an exception
      * The workflow is configured with asynchronous=true. The execution of
        executeWorkflow() is always successful. In this case executeWorkflow()
        creates a WfProcessInstance entry as marker WorkflowHandlerServlet which
        executes the workflow at a later time.
      * The workflow is configured with asynchronous=false. The execution of
        executeWorkflow() is not successful if the execution throws an exception
        and maxRetries is set to 0.

      Transaction handling
      * Synchronous workflows are always executed in the context of the provider
        transaction. A synchronous workflow can never force a rollback. Exceptions
        are catched by Workflows.executeWorkflow() and the status is updated in
        WfProcessInstance and a corresponding log entry.
      * The implementation of a synchronous workflow must start a new transaction
        if it must be able to force a transaction rollback in case of an exception.
      * Asynchronous workflows are executed in the context of WorkflowHandlerServlet
        within a unit of work.

      CR10007235
      Wizard Loading: issue warning if meta tags missing / not found. Meta tags
      label, forClass, and order are vital for displaying the wizard in the
      appropriate operations menu; currently, if these tags are not found, the
      wizard is not loaded but NO WARNING is issued. The whole wizard file
      is scanned now for tags (instead of the first 10K only) and the forClass
      property is is logged after loading the wizard.

      CR10006345
      MailImporterServlet: improve error handling. Improve error handling of
      MailImporterServlet:
      * send alert to segment admin in case of errors
      * no low-level catching of exceptions with unexpected handling
      This way all exceptions are visible as alerts to the segment admin and logged
      at info level.

      CR10007321
      Disable subscriptions of disabled principals. disabled principals cannot
      login; if the subscription handler does not honour the disabled flag of
      principals, however, there is a potential security risk as the user might
      still receive e-mail notifications (which might contain information that
      should be available to enabled principals only...).

      CR10007458
      activity1: ActivityFollowUp is now a CrxObject.

      CR10007404
      account1: Group, UnspecifiedAccount, etc. should be subclass of AbstractGroup
      instead of Group. This allows filtering of accounts which are instance of
      Group only.


2.1.  FIXED BUGS

      CR10006373
      VCard, ICalendar: tagged attribute names. VCard and ICalendar importer are
      able to handle tagged attribute names, e.g.
      N;LANGUAGE=zh-cn;CHARSET=gb2312:Last name.

      CR10006316
      Portal: Media attachments with single quote in name broken. The file name
      in the download url is now url encoded. E.g. the file name Copy of crx_'pg.sql
      results in the download file name Copy+of+crx_%27pg.sql. The filename
      SOA_03_05.pdf remains unchanged.

      CR10007339
      Layout JSP of subclass is invoked. The layout JSP edit-<class B>.jsp
      is invoked when creating/editing class A objects where B is a subclass
      of A.
      With this version the layouts are loaded for class C with the priorities
      as follows:
      1. layout show/edit-<class C>.jsp if it exists
      2. layout show/edit-<class A>.jsp if it exists and C is a subclass of A
      3. layout show/edit-default.jsp

      CR10007421
      E-Mail Importer / various bugs
      * handle parts with disposition inline as body text
      * unnamed parts

      CR10007287
      Operation addWorkRecord fails if no resource is provided. No exception is
      thrown and no warning is generated, i.e. the user is led to believe that
      the work record was created (but it is clearly not as the DB is unchanged).

2.2   REMOVED FEATURES

      CR10006271
      The following classes are removed in model activity1:
      * ResourceNameFilterProperty
      * ResourceRoleFilterProperty
      * ResourceFilterProperty
      * ActivityGroupFilterProperty
      They are replaced by the more generic ActivityQueryFilterProperty


==============================================================================
Version 1.10.1                                                      2006-02-23
==============================================================================

1.    NEW FEATURES

      CR10007457
      account1: list of addresses. Add shared association in account1
      SegmentContainsAddress which allows to get top-level access to all account
      addresses. This assocation allows raw access to address objects in contract
      to IndexEntry which is a (left) join of account and address objects.

      CR10007351
      DateProperty, DateTimeProperty: Add the property classes DateProperty and
      DateTimeProperty.

      CR10007350
      Data bindings for PropertySet. The following data binding classes for
      properties are available:

      * BooleanPropertyDataBinding
      * DecimalPropertyDataBinding
      * IntegerPropertyDataBinding
      * ReferencePropertyDataBinding
      * StringPropertyDataBinding

      The data bindings allow to add user-defined fields to CrxObjects as follows:
      1. Add the field as feature definition to the ui customizing
      2. Customize the new feature in ui customizing

      Below is a sample configuration which extends the class
      org:opencrx:kernel:account1:Contact by the new features custom1-5. You can
      add the XML snippet to contact.xml located in
      opencrx-core-CRX\WEB-INF\config\ui\Root\en_US. The values for the new
      features are stored as properties custom1, ... in the property set 'Custom'
      of the corresponding Contact object.

      <_content>
        <featureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom1">
            <_object>
              <type>org:w3c:string</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom2">
            <_object>
              <type>org:w3c:integer</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom3">
            <_object>
              <type>org:w3c:boolean</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom4">
            <_object>
              <type>org:w3c:decimal</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom5">
            <_object>
              <type>org:opencrx:kernel:account1:Account</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom6">
            <_object>
              <type>org:w3c:date</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
          <org.openmdx.ui1.StructuralFeatureDefinition qualifiedName="org:opencrx:kernel:account1:Contact:Custom!custom7">
            <_object>
              <type>org:w3c:dateTime</type>
              <multiplicity>0..1</multiplicity>
              <changeable>true</changeable>
            </_object>
            <_content/>
          </org.openmdx.ui1.StructuralFeatureDefinition>
        </featureDefinition>
        <elementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom1">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 1</_item>
              </toolTip>
              <label>
                <_item>Custom 1</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.StringPropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom2">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 2</_item>
              </toolTip>
              <label>
                <_item>Custom 2</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.IntegerPropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom3">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 3</_item>
              </toolTip>
              <label>
                <_item>Custom 3</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.BooleanPropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom4">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 4</_item>
              </toolTip>
              <label>
                <_item>Custom 4</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.DecimalPropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom5">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 5</_item>
              </toolTip>
              <label>
                <_item>Custom 5</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.ReferencePropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom6">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 6</_item>
              </toolTip>
              <label>
                <_item>Custom 6</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.DatePropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact:Custom!custom7">
            <_object>
              <active>true</active>
              <toolTip>
                <_item>Custom field 7</_item>
              </toolTip>
              <label>
                <_item>Custom 7</_item>
              </label>
              <dataBindingName>org.opencrx.kernel.gui.generic.servlet.DateTimePropertyDataBinding</dataBindingName>
            </_object>
            <_content/>
          </org.openmdx.ui1.ElementDefinition>
          ...

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10007305
      Preparation for JDO. The database schema is now created using the JPOX
      support of openMDX. CopyDb allows to copy a database with 1.10.0 schema
      to a 'JDO compliant' database with 1.10.0+ schema. The database is accessed
      using the openMDX database plugin. A migration to a JPOX based database
      plugin is solved in a separate request. Schema creation is done as follows:
      * build openCRX with 'ant deliverables'
      * create schema with 'ant -Ddatabase.name="<db name>" create-schema
      <db name> is the name of a JPOX properties file located in ./core/etc/jpox.

      CR10007371
      Activate notifyPreDelete. Activate the MODEL/notifiyPreDelete option
      (in kernel.jar/META-INF/ejb-jar.xml). This way ObjectRemoval audit entries are
      created for the removed object and for recursively for its composites.

      CR10007348
      The EditableElement and EditableTypeElement classes were introduced for
      generic GUI support. The improved openMDX/Portal (wizards, customizable layouts)
      offers better methods for model user-fridendly model editing.

2.1.  FIXED BUGS

      CR10007316
      Alerts to multiple recipients broken. It is now possible to send alerts
      to multiple recipients using the operation UserHome.sendAlert() and
      specifying the recipients as list. Allowed separators are blanks ( ),
      commas (,) and semicolons (;).

2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.10.0                                                      2006-02-23
==============================================================================

1.    NEW FEATURES

      CR10007144
      Portal: inline object references. Allow to customize inline object reference
      tags. I.e. the tag 'activity:<activity number>' embedded in a TextValue field
      should be translated to the corresponding select object action. Extend
      PortalExtension_1_0 by the method renderTextValue().

      CR10007127
      CrxObjects are AlertSender. UserHomes and CrxObjects implement the method
      sendAlert(). If invoked on a CrxObject the parameter reference may be left
      empty. The reference is then set to the CrxObject which the operation is
      invoked on.

      CR10007128
      addWorkRecord() on activities. Activities implement the method
      addWorkRecordByDuration(). The method adds a work record and creates a
      resource assignment for the resource if it does not exist.

      CR10007113
      Mantis importer wizard. Add wizard which allows to import bug tracking
      projects from a mantis database. The wizard is available on the activities
      segment and takes the following input parameters:

      * Mantis project name
        Name of the mantis project to be imported.
      * Bug category names:
        List of bug categories (default is 'documentation, bug, software bug,
        hardware bug, feature request, note, question, task, installation,
        application form'). The mantis bug categories are mapped to activity
        incident type.
      * File upload base dir:
        Specify the base directory where mantis has stored the upload files.
      * Jdbc driver class:
        The mantis database is accessed using the specified jdbc driver. Specify
        the driver class, e.g. com.mysql.jdbc.Driver for MySQL.
      * Jdbc connection URL:
        Specify the jdbc connection url for the mantis database,
        e.g. jdbc:mysql://localhost:3306/mantis.
      * Jdbc user:
        Specify the mantis user name.
      * Jdbc password:
        Specify the mantis user password.
      * Activity creator name:
        It is a good idea to prepare openCRX as follows:
        1) Create an activity group which matches the name of the Mantis
           project to be imported.
        2) Create an activity creator and add activity group created in step 1).
           Set the name to the Mantis project name to be imported. Set the
           'Bug and features tracking process' as activity process.
        Enter now the activity creator name specified in step 2)
      * Process transition name:
        The bug notes are appended to an activity using the operation doFollowUp().
        The operation requires as parameter a transition of the process specified
        by the activity creator. In case of the 'Bug and features tracking process'
        the transition 'Add Note' works best.

      CR0003619
      ObjectInspectorServlet: multiplicity of multi-valued attributes can be
      customized. Default value is the modeled multiplicity.

        <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:address1:PostalAddressable:postalAddressLine">
          <_object>
            <active>true</active>
            <spanRow>2</spanRow>
            <multiplicity>3</multiplicity>
            <toolTip>
              <_item>Address line(s)</_item>
            </toolTip>
            <label>
              <_item>Address line(s)</_item>
            </label>
            <orderFieldGroup>
              <_item>0</_item>
              <_item>0</_item>
              <_item>10</_item>
            </orderFieldGroup>
            <orderObjectContainer>
              <_item>0</_item>
              <_item>0</_item>
              <_item>18</_item>
            </orderObjectContainer>
          </_object>
          <_content/>
        </org.openmdx.ui1.ElementDefinition>

      CR0003614
      Price management: The following operations are added to PriceLevel:
      * clonePriceLevel: clones the price level and optionally all dependent
        price levels.
      * createInitialPrices: creates initial prices for a price level. The
        prices are set to 0. The prices can then be set using the editable
        grid.
      * removePrices: removes all prices from a price level.
      * calculatePrices: calculates / recalculates the prices for non-basic
        prices levels and optionally all dependent price levels. The prices
        are calculated according the the price modifiers defined for the
        price level.

      CR0003627
      XMLImport: the operation UserHome.importItem() for XML files supports
      segment rewriting, i.e. if an XML file is imported to segment S all
      occurences of path values of the form ../segment/Standard/.. are replaced
      by ../segment/S/... Segment 'Root' is not replaced. The segment Root
      contains shared objects, e.g. Uoms, Codes, Users and the references
      to these shared objects must not be replaced.

      CR10006315
      createUser: login principal and subject are created on-demand if they
      do not exist. This way the segment administrator can register a new
      user without having the root administrator first to create the login
      principal and subject.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10007150
      Portal: In case the application context can not be initialized properly
      the user is sent back to the login page instead of throwing a ServletException
      leaving the session and browser in an inconsistent state.

      CR10007145
      Portal: rename Evaluator_1_0 to PortalExtension_1_0. The default implementation
      DefaultEvaluator is renamed to DefaultPortalExtension.

2.1.  FIXED BUGS
      none


2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.11                                                      2006-12-04
==============================================================================

1.    NEW FEATURES

      CR10006231
      MailImporterServlet: the option 'caseInsenstiveAddressLookup' of type
      Boolean defined in the MailImporterServlet component configuration allows
      to specify whether email address matching should be performed case
      insensitive. The default value is false.

      CR0003491
      Activities: MS project XML exporter. The exporter is installed as wizard
      for ActivityTrackers. The following objects are exported:

      * Activity. An activity is exported as task as the following example shows:
      <Task>
        <UID>1</UID>
        <ID>1</ID>
        <Name>task1</Name>
        <Type>0</Type>
        <CreateDate>2006-05-08T09:59:00</CreateDate>
        <OutlineNumber>1</OutlineNumber>
        <OutlineLevel>1</OutlineLevel>
        <Priority>500</Priority>
        <Start>2006-05-09T00:00:00</Start>
        <Finish>2006-05-12T23:59:59</Finish>
        <DurationFormat>39</DurationFormat>
        <ActualDuration>PT40H0M0S</ActualDuration>
        <PercentComplete>80</PercentComplete>
        <ResumeValid>1</ResumeValid>
        <EffortDriven>1</EffortDriven>
        <ActualStart>2006-05-09</ActualStart>
        <ActualFinish>2006-05-09</ActualFinish>
        <ConstraintType>2</ConstraintType>
        <CalendarUID>1</CalendarUID>
        <ConstraintDate>2006-05-09</ConstraintDate>
        <IgnoreResourceCalendar>1</IgnoreResourceCalendar>
      </Task>

      * Resource. A resource is exported as:
      <Resource>
        <UID>1</UID>
        <ID>1</ID>
        <Name><resource name></Name>
        <Type>1</Type>
        <Hyperlink>hyperlink to corresponding openCRX object</Hyperlink>
        <HyperlinkAddress><object url></HyperlinkAddress>
        <ExtendedAttribute>
          <FieldID>205520904</FieldID>
          <Value><object xri></Value>
        </ExtendedAttribute>
      </Resource>

      * ResourceAssignment
      <Assignment>
        <UID>1</UID>
        <TaskUID>3</TaskUID>
        <ResourceUID>1</ResourceUID>
        <ActualWork>PT0H0M0S</ActualWork>
        <Hyperlink>hyperlink to corresponding openCRX object</Hyperlink>
        <HyperlinkAddress><url of exported object></HyperlinkAddress>
        <Units>1.0</Units>
        <TimephasedData>
          <Type>2</Type>
          <UID>2</UID>
          <Unit>2</Unit>
          <Value>PT0H0M0S</Value>
        </TimephasedData>
      </Assignment>

      * Calendar. Only one fixed standard project calendar is exported. This way
        MS Project does not move tasks when importing the project file.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR10006227
      Database: normalize database tables. Multi-valued attributes are stored
      in separate tables. E.g. the single-valued attributes of an account are
      stored in the table kernel_Account, the multi-valued attributes are
      stored in table kernel_Account_N. This simplifies the views and improves
      the performance. The new database schema also serves as preparation work
      for a migration to another persistency framework such as JDO/JPOX or JPA.
      The database migration from previous versions is done as follows:

      * Run upgrade-from-1.9.1-to-1.10.0.sql
      * Drop all views
      * Convert to the database from old schema to the new schema by running
        the CheckDb tool. Download and install the openCRX binaries, open a
        shell and switch to the directory opencrx/core. The parameters for
        CheckDb are database specific. E.g. for PostgreSQL the command is:

        ant
          -Ddb.jdbc.url="jdbc:postgresql://localhost/<database name>"
          -Ddb.jdbc.driver="org.postgresql.Driver"
          -Ddb.jdbc.driver.classpath="<driver location>/postgresql-8/lib/postgresql-8.1-407.jdbc3.jar"
          -Ddb.username="<db user name>"
          -Ddb.password="<db password>"
          convert-from-1_9_1-to-1_10_0

        Depending on the database size the conversion can take several minutes. The
        conversion runs in two phases:

        - Phase 0: conversion of object references from the rid/oid format to the
                   single-column id format
        - Phase 1: database normalization, i.e. transferring multi-valued attributes
                   to the .._N columns

        All issued commands are logged to the console. If a command fails it MUST
        be fixed before going to the next step. Typical errors are:

        - ALTER and DROP statements can not be issued because of existing
          constraints. Drop the constraints manually and restart CheckDb
        - Version mismatch: the database is not of version 1.9.1. Expected columns
          can not be found

      * Create views with dbcreate-views.sql
      * Create indexes with dbcreate-indexes.sql

      For more information see the upgrade instructions http://www.opencrx.org/faq.htm#191to1100

      CR10006294
      Attach accounts in a role-based fashion to products. The references
      AbstractProduct.supplier and AbstractProduct.competitor are removed.
      References to accounts are handled by the new class AccountAssignmentProduct
      which is composite to AbstractProduct. The type of the assignment can
      be defined with the code field AccountAssignementProduct.accountRole.

      IMPORTANT: the database upgrade script drops the columns
      kernel_Product.competitor and kernel_Product.supplier and does NOT
      migrate existing assignments to the table kernel_AccountAssignment. If
      the columns competitor and supplier contain data you must migrate the
      data before dropping the columns.

      CR10006300
      home1: Alert, UserHome are Auditees. Alerts and UserHomes are Auditees.
      This allows to track modifications on these objects. As a consequence
      the standard action of a topic should be SendAlert only (and not
      SendMailNotification anymore). The new topic 'Alert Modifications' is
      the only topic with action SendAlertNotification. Users subscribe to
      this topic if they want to receive alerts and for incoming alert an
      email notification. The segment administrator should migrate existing
      topics and subscriptions as follows:
      * remove the SendMailNotification action from all topics execpt the
        'Alert Modifications' topic
      * add a 'New Alerts' subscription with topic 'Alert Modifications' and
        event type 'Object creation' for users who wish to receive email
        notifications for incoming new alerts.

      CR10006299
      sendAlert() must be executed with segment administrator privileges.
      Otherwise sendAlert() requires update permissions for user home of
      receiving user.

      CR10006295
      Upgrade to BIRT 2.1.1. The new version supports XML datasources which
      allows a better integration with openCRX. BIRT reports can be registered
      in the Web-EAR under WEB-INF/config/report/<locale>. The following rules
      apply for report definitions:
      * The name of a report definition file is
        <fully qualified class name>-<report name>.rptdesign. The report is
        registered in the 'Reports' menu of the inspector rendering objects
        of the class <fully qualified class name>.
      * The report design version must be of version 3.2.6 (the version is set
        by the BIRT report designer).
      * The title of the report is mapped to the 'Reports' menu label. If
        not defined, the name of the report is shown as menu label.
      * The report must be based on an XML datasource (make sure to select the
        DTP XML Data Source!). During report design, the URL of the datasource
        can be set to any local XML file, e.g. c:/temp/reports/TopNCustomers.xml.
        During runtime the XML data must be supplied by a JSP. The JSP file name
        must be data-<fully qualified class name>-<report name>.jsp. The servlet
        must return as reply an XML stream with content type 'text/xml'.
        The structure of the XML must match the report definition.
      Also see examples in ./src/data/org.opencrx/report/en_US.

      Install the following BIRT packages for report design:
      * BIRT 2.1.1 and all requirements as described on
        from http://download.eclipse.org/birt/downloads
      * After installation you must upgrade to the latest stable build
        of Eclipse/Datatools (DTP), version 1.0. See
        http://www.eclipse.org/datatools/
        IMPORTANT: Make sure that you meet all installation requirememnts
        of DTP (e.g. Eclipse 3.2.1 SDK, EMF 2.2.1 and GEF 3.2.1). Remove
        old versions of datatools, emf, and gef in eclipse/plugins.
      After successful installation you should be able to open the sample
      reports located in ./src/data/org.opencrx/report/en_US.

      CR0003928
      WebLogic: improve performance with enable-call-by-reference. The option
      enable-call-by-reference in the WebLogic specific deployment descriptors
      are set to true.

2.1.  FIXED BUGS

      CR0003922
      OpenCrxSecurity_1 plugin destroys realm name. The method updateRealm()
      clears the realm name.


2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.8                                                       2006-09-24
==============================================================================

1.    NEW FEATURES

      CR0003852
      AccessControl: the new option inherit security settings from parent
      (path patterns configured by the method
      AccessControl_1.getInheritFromParentTypes()) allows to configure path
      patterns of objects which inherit their security settings from the
      parent object. By default, the access levels are determined by the direct
      composite parent object. The option allows to skip composition levels.
      E.g.  AccessControl_1 is configured by default so that DeliveryInformation
      inherits the access level from the Contract and not ContractPosition
      which improves performance when reading contracts and their positions.

      CR0003845
      Account(s) involved in Activity. The view Account.assignedActivity now
      shows activities which have a contract reference and the contract has
      as customer the Account. Activities and Accounts can be linked with any
      type of account (often Leads).

      CR0003839
      ativity1: ActivityType.activityClass supports activity1 extensions.
      activityClassName allows to specify the activity's class name if
      activityClass==0.

      CR0003838
      contract1: AbstractContract has supplier. Add reference
      AbstractContract.supplier referencing an Account.

      CR0003840
      account1: Allow to set validFrom/validTo for group memberships.

      CR0003816
      Automated restart of openCRX:
      1. activate the options load-on-startup in web.xml for ObjectInspectorServlet
         and WorkflowController
      2. WorkflowController reads the configuration for monitored URLs from the
         ComponentConfiguration. An empty ComponentConfiguration is created on
         the fly. It can be managed with the standard GUI by admin-Root in in
         segment admin1. Sample configuration properties are:
         o serverURL: http://localhost:8080/opencrx-core-CRX
         o WorkflowHandler.CRX.Standard.autostart: true
         o WorkflowHandler.CRX.Standard.pingrate: 1
         o SubscriptionHandler.CRX.Standard.pingrate: 1
         o SubscriptionHandler.CRX.Standard.autostart: true
         With this configuration the WorkflowControllerServlet pings the URLs
         o http://localhost:8080/opencrx-core-CRX/WorkflowHandler
         o http://localhost:8080/opencrx-core-CRX/SubscriptionHandler
         with a pingrate of 1 minute for the provider CRX and segment
         Standard. With autostart=true monitoring starts immediately at
         servlet init.

      CR0003836
      product: ProductClassification allows to classify products.

      CR0003831
      admin1: Application components such as wizards, reports, layouts, workflows,
      etc. can store configuration properties as component configurations
      managed in admin1 segments.

      CR0003834
      product1: Products support multiple product numbers of different format.

      CR0003832
      building1: Add a reference AbstractBuildingUnit->Addressable which lists
      the addresses assigned to a building.

      CR0003833
      product1: Allow to attach addresses to products. E.g. this allows to
      track the location of a product.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003841
      account1: LegalEntity and UnspecifiedAccount are Groups.

      CR0003901
      Performance option for AccessControl. In order to determine the browseAccessLevel
      AccessControl has to read the parent object before accessing (get / find) an
      object. This is very inefficient especially when reading contracts, contract
      positions, product configurations. The new option allows to configure a
      browse|create|remove|AccessLevel for specific path patterns. On object
      updates, the access levels are set according to the config. On object retrievals,
      the levels are read from the config instead from the parent object. The set of
      inheritance path patterns is configured by modifying or overriding the method
      getInheritFromParentTypes().

      CR0003904
      SecurityContext.assertPrincipals() inefficient.

      CR0003851
      activityNumber, positionNumber as autonum columns. The autonum attributes
      Activity.activityNumber and ContractPosition.positionNumber are configured
      as autonum columns at database plugin level (see populate-preferences.sql).
      The autonum values are generated by SQL sequences. As a consequence
      the columns kernel_Segment.current_activity_number and current_position_number
      are removed. The start value of the sequences should be initialized with the
      value of current_activity_number and current_position_number, respectively.

      CR0003899
      Contract_1.calculateContractPosition inefficient:
      * each position is retrieved (get) at least two times for a contract. In fact
        one find request for all positions would be sufficient.
      * delivery information is retrieved every time even if quantityShipped and
        quantityBackOrdered is not in the fetch set.

      CR0003843
      MailImporterServlet: migrate to ComponentConfiguration. The MailImporterServlet
      manages its configuration in admin1:ComponentConfiguration (and not in
      Workflow configuration anymore). The configuration properties are of the
      form:
      * <provider>.<segment>.mailbox [.Default] INBOX
      * <provider>.<segment>.mailServiceName [.Default] /mail/provider/<provider name>
      * <provider>.<segment>.deleteImportedMessages [.Default] false
      The .Default properties are created on-the-fly the first time the
      MailImporterServlet reads the configuration for a specific <provider>/<segment>.
      mailServiceName must be configured as mail resource:

      1. Enable mail resource-ref in web.xml
         <resource-ref id="mail_opencrx_CRX">
           <res-ref-name>mail/provider/CRX</res-ref-name>
           <res-type>javax.mail.Session</res-type>
           <res-auth>Container</res-auth>
         </resource-ref>
      2. Enable mail resource-ref in application server specific web.xml. E.g.
         for jboss-web.xml
         <resource-ref>
           <res-ref-name>mail/provider/CRX</res-ref-name>
           <jndi-name>java:/mail/provider/CRX</jndi-name>
         </resource-ref>
      3. Add mail resource to application server. E.g. for JBoss add a
         mail-service.xml (also see ./opencrx/core/src/connector/jboss-3/mail-service.xml)

      CR0003842
      Audit: efficient query for non-visited entries. The current implementation
      requires a query 'FOR_ALL visitedBy NOT_IS_IN <visitorId>'. This returns
      all audit entries where visitorId is not set. The audit marks all new
      entries with <visitorId>:[- | <time stamp of visit>] where - is set for
      new entries. The query 'THERE_EXISTS visitedBy IS_IN <visitorId>:-' allows
      a much more efficient database query.

      CR0003841
      account1: LegalEntity is a Group. LegalEntity should be a subclass of
      Group instead of a direct subclass of Account. This allows to add
      group members to legal entities.

      CR0003597
      Outbound EMail is now configured as application server resource. The setup
      is as follows:
      * Configure one (or more) javax.mail.Session resources. The configuration
        is specific for an application server. You find sample configurations for
        - Tomcat in ../opencrx/core/src/connector/tomcat/opencrx-core-CRX.xml
        - Jboss in ../opencrx/core/src/connector/jboss-3/mail-service.xml
      * Add the Mail resource-ref to web.xml. You find a disabled configuration
        in ../opencrx/core/src/data/org.opencrx/WEB-INF/web.xml or in the
        standard opencrx-core-CRX-Web.ear#opencrx-core-CRX.war. Add the
        resource-ref also to the application server specific web.xml. For
        JBoss this is jboss-web.xml. For JBoss you find a disabled configuration
        in ../opencrx/core/src/ear/opencrx-core-CRX-web.ear/opencrx-core-CRX.war/WEB-INF/jboss-web.xml.
      * MailWorkflow tries to find EMail resources with the following JNDI names:
        1. java:comp/env/<EMailAccount.outgoingMailServiceName>
        2. java:comp/env/provider/<provider name>/segment/<segment name>
        3. java:comp/env/provider/<provider name>
      * You find more information about JavaMail configuration at:
        - Tomcat: http://tomcat.apache.org/tomcat-4.0-doc/jndi-resources-howto.html
        - JBoss: http://xpetstore.sourceforge.net/setup_jboss-3.0.x.html
        - WLS: http://edocs.bea.com/wls/docs90/ConsoleHelp/taskhelp/mail/CreateMailSessions.html
        - WebSphere: http://zones.advisor.com/doc/15080

      CR0003830
      address1: Addressable references AbstractBuildingUnit instead of Building.


2.1.  FIXED BUGS

      CR0003812
      Audit: audit entry created with missing auditee? It seems that in certain
      situations audit entries are created where the corresponding operation on
      the auditee is not completed sucessfully. E.g. object creations are logged
      as audit entry but the auditee is not created. Object are now created before
      audit entry. This guarantees that audit entries are created only if the auditee
      exists independent of the database and transaction policy settings.

2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.7                                                       2006-08-21
==============================================================================

1.    NEW FEATURES

      CR0003828
      Activities: Add mainEffortEstimate as derived attribute to Activity.

      CR0003633
      product1, contract1, depot1: Add ComplexProductBundle and
      ComplexProductBundleType. Complex product bundles allow to define
      recursive and reusable product bundles.

2.    CHANGES

2.0.  CHANGED FEATURES
      none

2.1.  FIXED BUGS

      CR0003623
      Cannot delete DepotEntity. Creation is OK, but deletion of depot
      entities throws exception:

      BasicException.Entry[2]
         Timestamp=2006-06-20 13:07:33.157
         Class=org.openmdx.compatibility.base.dataprovider.layer.persistence.jdbc.DatabaseConfiguration
         Method=getDbObjectConfiguration
         Line=406
         ExceptionDomain=DefaultDomain
         ExceptionCode=ASSERTION_FAILURE
         Param[0]: exception.class=org.openmdx.base.exception.ServiceException
         Param[1]: exception.source=apps:server1
         Param[2]: path=org::opencrx::kernel::depot1/provider/CRX/segment/Standard/entity/55STMABMEdu7hB+o7OBg1A/contract/::*
         Description=No type configuration found for path
         Backtrace:
           at org.openmdx.compatibility.base.dataprovider.layer.persistence.jdbc.DatabaseConfiguration.getDbObjectConfiguration(DatabaseConfiguration.java:406)


      CR0003823
      Issues with BundledProductType. In the updateContractPosition method,
      line 1819:
      1817 else if(p.values("product").size() > 0) {
      1818 p = this.plugin.retrieveObjectFromDelegation(
      1819 (Path)product.values("product").get(0)
      1820 );
      you should have
      1819 (Path)p.values("product").get(0)

      CR0003824
      Sales Taxe Type Deletion. References to sales tax types are stored in
      contracts, contract positions and products. If a sales tax type is
      removed the GUI shows N/A. NullPointer fixed.

2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.6                                                       2006-08-06
==============================================================================

1.    NEW FEATURES

      CR0003633
      product1, contract1, depot1: Add ComplexProductBundle. Complex product
      bundles allow to define recursive product bundles. With version 1.9.6
      the implementation is not complete.

      Done:
      - Model extensions in product1, contract1, depot1
      - Implementation of Products. ComplexProductBundles can be added to
        ProductOfferings. The operation ProductOffering.renumberProductBundle()
        allows to properly set the item numbers of the product bundles. The
        operation AbstractProductBundle.changeOrder() allows to move up /
        move down a product bundle within a product offering.
      To be done:
      - Implementation of AbstractContract.createProductOfferingPosition()
      - Implementation of AbstractContract.updateInventory()

2.    CHANGES

2.0.  CHANGED FEATURES
      none

2.1.  FIXED BUGS
      none

2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.5                                                       2006-07-18
==============================================================================

1.    NEW FEATURES

      CR0003635
      Add depotSelector to WorkRecord. Currently, depots with usage=10 are
      selected to generate the work compound booking. For more flexibility,
      the depotSelector should be specified on the WorkRecord. This allows
      updateWorkRecord() to select the depots specified by the depotSelector.
      Should also be a parameter of the addWorkRecord...() operations.

      CR0003617
      ObjectInspectorServlet: locale as user setting.

      CR0003632
      Add JSP reports. Report JSPs can be registered in directory WEB-INF/config/
      report/<locale>. For an Apache POI based example see
      org.opencrx.kernel.account1.Segment-Contacts.jsp.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003467
      totalAmountIncludingTax is always 0 (zero) in grid assigned activities.
      Recalculations are now made persistent on contract level.

2.1.  FIXED BUGS

      CR0003625
      Contract: missing selectable product bundles. Additional selectable
      product bundles are not shown if the is no product bundle position of
      the same type. As a consequence, if for a product bundle minPosition=0,
      it is never selectable after creating an offering contract position.

2.2   REMOVED FEATURES
      none


==============================================================================
Version 1.9.4                                                      2006-06-07
==============================================================================

1.    NEW FEATURES

      CR0003518
      product1: add BundledProductType. Bundled products should (optionally)
      have a bundled product type. This allows to 'reuse' bundled products in
      different product bundle types.

      CR0003520
      Change orders are implemented as follows:
      * PositionModifications: QuantityModification, PositionCreation,
        PositionRemoval and ConfiguratiionModification are logged on contract
        modifications.
      * All removed contract positions are moved to removed contract positions.
      * updateInventory() generates a delta compound booking with the last
        final booking as base.

      CR0003503
      CalculationRules: Each contract and contract position points to a
      calculation rule which is specified by a server-side java script
      (same pattern as with PricingRule). Calculation rules are defined with
      org:opencrx:kernel:contract1:CalculationRule objects:

      // Calculates baseAmount, discountAmount and amount for a contract
      // position
      public static org.opencrx.kernel.contract1.cci.GetPositionAmountsResult
        getPositionAmounts(
          org.openmdx.base.accessor.jmi.cci.RefPackage_1_0 rootPkg,
          org.opencrx.kernel.contract1.cci.CalculationRule calculationRule,
          org.opencrx.kernel.contract1.cci.ContractPosition position,
          java.math.BigDecimal adjustedQuantity,
          java.math.BigDecimal uomScaleFactor,
          java.math.BigDecimal salesTaxRate
        );

      // Calculates totalBaseAmount, totalDiscountAmount, totalTaxAmount,
      // totalAmountIncludingTax, totalAmount, totalSalesCommission on
      // for a contract.
      public static org.opencrx.kernel.contract1.cci.GetContractAmountsResult
        getContractAmounts(
          org.openmdx.base.accessor.jmi.cci.RefPackage_1_0 rootPkg,
          org.opencrx.kernel.contract1.cci.CalculationRule calculationRule,
          org.opencrx.kernel.contract1.cci.AbstractContract contract,
          java.lang.Integer[] lineItemNumbers,
          java.math.BigDecimal[] positionBaseAmounts,
          java.math.BigDecimal[] positionDiscountAmounts,
          java.math.BigDecimal[] positionTaxAmounts,
          java.math.BigDecimal[] positionAmounts,
          java.math.BigDecimal[] salesCommissions,
          java.lang.Boolean[] salesCommissionIsPercentages
        );

      CR0003596
      CrxObject should be PropertySet container.

      CR0003519
      Property values should have a predefinable set of values.
      org:opencrx:kernel:base:Property has new reference 'domain' pointing to
      a CodeValueContainer which holds the value domain of the property. If a
      domain is defined for a property, Evaluator.getSelectableValues() retrieves
      these values and shows them in a drop down.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003467
      totalAmountIncludingTax is always 0 (zero) in grid assigned activities.
      Recalculations are now made persistent on contract level.

2.1.  FIXED BUGS

      CR0003562
      Contract template does not copy product.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.9.3                                                       2006-05-16
==============================================================================

1.    NEW FEATURES
      none

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003533
      Use ObjectInspectorServlet from new project openMDX/Portal (instead of
      openMDX/Core).

      CR0003546
      Move all test and demo classes from openCRX/Core to sub-project
      openCRX/Sample.

2.1.  FIXED BUGS

      CR0003590
      Cannot delete work records if work booking is not set.

      CR0003564
      Impossible to assign a Product to a BundledProduct.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.9.1                                                       2006-04-02
==============================================================================

1.    NEW FEATURES

      CR0002835
      MailImporterServlet: servlet is able to import EMails from a configurable
      email account as EMail activities. The servlet is controlled by the
      WorkflowControllerServlet (login to .../WorkflowController and activate
      the MailImporterServlet for the provider/segment to be monitored). The
      servlet creates the following configuration data on-the-fly:
      * Add MailImporterServlet workflow with default configuration properties.
        The configuration must be adapted to your environment (mail server,
        account, passwort, ...)
      * Activity creator 'Default E-Mail Creator'
      * Activity group 'E-Mails'
      * Activity type 'E-Mails'
      * Activity process 'E-Mail process'
      The MailImporterServlet polls the configured email account for new
      mails. For each attachment of type MimeMessage is processed as
      follows:
      * Lookup of an activity creator which matches the mail's subject.
        If no corresponding activity creator is found the default creator
        'Default E-Mail Creator' is selected.
      * A new EMail activity is created using the selected activity creator.
      * The EMail activity is updated with the attachment's content, i.e.
        recipients, subject, body. The original mail header is attached
        as note to the created EMail activity.

      CR0003508
      Title search for user homes. It should be possible to search user homes
      by the contact's title.

      CR0003524
      Deployment: multiple customized Web-EARs access the same App-EAR. The
      build process creates the following EARs:
      * One App EAR for the provider.name specified in build.properties
      * One Web EAR for the provider.name and web.application.name in
        build.properties, whereas the Web EAR delegates to the App EAR.
      * With ant -Dweb.application.name=<other name> -Ddata.dir=<custom
        data dir> additional Web EARs can be created. They Web EAR
        has the name <other name> containing the customizing info from
        <custom data dir>.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003494, CR0003517
      Products: rework pricing model. Prices can now be assigned to one
      or more price level. A price level provides operations to create
      new prices and to derive prices from existing price levels. The
      price assignment to a contract position is controlled by pricing
      rules. The pricing rule logic is controlled by a user-definable
      script. This allows easy customizing of the pricing algorithm.
      Samples for pricing algorithms are:
      - lowest price (standard pricing rule of openCRX)
      - tariff / discount code based pricing. The pricing algorithm
        derives the price level from attributes defined on the contract
        or contract positions.

2.1.  FIXED BUGS
      none

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.9.0                                                       2006-02-20
==============================================================================

1.    NEW FEATURES

      CR0003480
      GUI: Allow enable/disable top/left pane.

      CR0003510
      GUI: allow disabling of Edit / Delete operations.
      The method Evaluator_1_0.isEnabled() allows to enable/disable items.
      The operation edit is tested with ui element name
      org:openmdx:base:BasicObject:edit and delete with ui element name
      org:openmdx:base:BasicObject:delete.

      CR0003451
      Database: Conversion of database to schema which does not require the
      tables kernel_REF and security_REF anymore. The tables were used to
      store object references. References are now stored in an efficient,
      human-readable format in a non-normlized form in the business object
      tables. This format improves performance and simplifies the database
      management. The new ant target 'CheckDb' allows to ugprade the database
      to the new structure.

      CR0003457
      Build: subprojects for locales and customizing. Also see README
      section 8/.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003495
      Deployment: Moved database plugin configuration from deployment
      descriptor kernel.jar/META-INF/ejb.xml to database table
      prefs_PREFERENCES. The preferences are loaded with the
      script populate-preferences.sql.

      CR0003454
      Extend activity1:
      * support for projects, calendars, resources and assignments of
        resources to activities.
      * Extended support for work records and work reports.
      * Support for user-definable activity filters.
      * Support for unified milestones and categories.
      * Multiple effort estimates for activities. Work reports can be
        booked to depots.
      * User-defineable activity types, activity processes and activity
        creators.

      CR0003507
      GUI: loadCodes, loadData on demand. It should be possible to reload
      codes and data without restarting the application. Codes and
      data are reloaded when logged in as 'initPrincipal' (= admin-Root)
      and by clicking on reload object.

      CR0003506
      Deprecate Root servlet. Deprecate Root servlet and move all Root
      specific functions to the Standard servlet. This simplifies build
      and deployment.

      CR0003500
      Workflow handler should is refactored as servlet instead of external
      application client (WfExecutionClient). This simplifies deployment and
      management. The WorkflowController is started by selecting the
      'Workflow Controller' link on login page of the root servlet. The
      segments to be monitored are configured in
      ./core/src/data/org.opencrx/WEB-INF/web.xml. Monitoring is
      started automatically when the servlet is invoked the first time.
      The servlet allows to turn off/on the monitoring for each segment.

      CR0003495
      Moved the database plugin configuration (ejb-jar.xml from kernel.jar
      and security.jar) to table PREFS_Preferences. This allows now to
      reconfigure the database plugin without modifying the deployment
      descriptor. E.g. for a new class added to a diagram it is sufficient
      to add the corresponding type, dbObject and dbObjectFormat entries to
      the PREFS_Preferences table.

2.1.  FIXED BUGS

      CR0003514
      GUI: exception is thrown and navigation back to user home page
      when entering illegal operators in search field.

      CR0003514
      GUI: illegal operators. When illegal operators
      are entered in the search field an exception is logged and the home
      page is shown.

      CR0003499
      Editable Grid / contract position update wrong: changed prices reset
      to default. Scenario:
      - take any contract (quote, salesOrder, etc.) with two or more positions
      - edit position grid and change price of position 1
      - save/commit --> changed price is correct
      - edit position grid and change price of position 2
        (note that position 1 is displayed - correctly - with changed price)
      - save / commit --> changed price of position 2 is correct, but price of
        position 1 is reset to default changed prices must not be reset
      Position price is set to product default price only if product is changed.


2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.8.4                                                       2005-11-10
==============================================================================

1.    NEW FEATURES

      CR0003440
      ObjectInspectorServlet: customizable operations. It is be possible
      to extend the ObjectInspectorServlet by user-defined JSPs. The JSPs
      must be located under ./wizards/<locale>. They naming conventions
      are:
      * file name: <qualified class name>-<servlet name>.JSP
      * Tags:
        <meta name="label" content="<label of menu entry>">
        <meta name="toolTip" content="<tool tip of menu entry>">
        <meta name="targetType" content="_blank|_this,...">
      Registered JSPs are shown as menu entries in objects of type
      <qualified class name>.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003482
      Slow operation execution. Executing an non-query operation invalidates
      the object manager and retries all objects. This is OK for user data
      objects, however the control objects (root objects, favorites, history)
      should not be refreshed. User data and control objects should be handled
      by different managers.

2.1.  FIXED BUGS

      CR0003483
      GUI: URL object link location do not work as attribute value.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.8.3                                                       2005-11-02
==============================================================================

1.    NEW FEATURES

      CR0003466
      MOF: editable grids for attributes, operations and parameters.

      CR0003480
      GUI: Allow enable/disable top/left pane.

      CR0003478
      GUI: Allow to set page size. The number of rows returned in a grid can be
      set by the user.

      CR0003472
      importLoginPrincipals(), importUsers()

      Add operation admin1:Segment:importLoginPrincipals(). The operation
      takes a file of the following form:
        Subject;subject name;subject description
        Principal;principal name;principal description;assigned subject name;comma-separated list of assigned group names

      Example:
        Subject;guest;Guest
        Principal;guest;Default\\guest;guest;Users

      Add operation home1:Segment:importUsers(). The operation takes a file
      of the following form:
        User;principal name;contact alias name;contact full name;primary principal group;initial password

      Example:
        User;guest;-;Guest;Users;changeme
        User;test;TEST;-;Users;changeme

      CR0002731
      Add operations createLead(), createOpportunity(), createQuote(),
      createSalesOrder(), createInvoice() to class Account. The operations
      take the optional parameter basedOn which allows to specify an
      existing contract which serves as template to create the new
      contract.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003476
      GUI: Rework multidelete to use forms.

2.1.  FIXED BUGS

      CR0003499
      ClassCastException trying to do booking.getOrigin(). ContractPosition
      must be instanceof BookingOrigin.

      CR0003465
      createSalesOrder() and other pipeline creation operations broken. All
      userXXX attributes (and other attibutes) are not copied.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.8.2                                                       2005-10-20
==============================================================================

1.    NEW FEATURES

      CR0003445
      Contract / Product: The flag DepotReference.holderQualifiesPosition
      allows to set the depot position qualifier if set to true. In case
      of contract positions (which are DepotReferenceHolders) the depot
      position qualifier is set to the positionNumber of the contract
      position when executing the operation updateInventory().

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003463
      omitting endDate/validTo of price information. As of openCRX v1.8.1 one
      must set the attribute endDate (customized as validTo) of price information
      otherwise price attributes "at higher levels" (e.g. Bundled Product,
      Product Bundles, Product Offering, Contract, ...) are left empty.
      Example:
      Define a product with a base price and leave Valid to (i.e. endDate)
      empty. Creating contract postions containing this product will never
      have price information even if "current date >= begin date" holds
      The semantic of omitting the end date should be that the price is valid
      at all dates >= begin date. If there are multiple prices satisfying
      "current date >= begin date" then the price with the largest begin
      date (still satisfying "current date >= begin date") must win.

      CR0003446
      Contract: clone of contract must not copy inventory compound booking.
      Clone was changed so that it does not copy readonly features anymore.
      The class Cloneable allows to configure readonly features which are
      cloneable.

      CR0003462
      Activities: removal of activity must check existence of assigned trackers
      / tracker groups. Activities may only be removed if there are no assigned
      trackers / tracker groups.

      CR0003458
      AccessControl: default owning user of objects composite of user home
      should be set to owning user of user home.

      CR0003447
      AccessControl: no permission should report requesting principal.

2.1.  FIXED BUGS

      CR0003494
      Subscription Handler does not work. In the 'subscriptionAcceptsMessage'
      there is a test on whether a 'java.util.Set' contains an 'Integer'.
      When testing the class of objects contained in the 'Set' you obtain
      'java.lang.Short'. The 'contains' method always returns 'false'.

      CR0003464
      Tracker charts: The sum of the activities effort estimates is not
      calculated.

      CR0003461
      Activities: Milestone / Category newActivity() does not assign to group.
      The newly created activity is only assigned to the tracker but not to
      the milestone / category.

      CR0003460
      Modeling: SecureObjectHasOwning user must reference org:opencrx:realm1:User.
      The reference SecureObjectHasOwning:owningUser must reference the type
      org:opencrx:realm1:User instead of org:opencrx:realm1:Principal.

      CR0003455
      vcard importer fails if tag EMAIL;PREF;INTERNET is missing.

2.2   REMOVED FEATURES
      none

==============================================================================
Version 1.8.1                                                       2005-10-10
==============================================================================

1.    NEW FEATURES

      CR0003444
      markAsComplete() sets actualEnd and marks linked activities of type
      'blocked' as started and open.

      CR0003281
      product1/contract1: price calculation. The following fields are added to
      the contract position, product offering, product bundle and bundled
      product:
      * minQuantity
      * maxQuantity
      * offsetQuantity
      * minMaxQuantityHandling
        0 - N/A
        1 - informational
        2 - strict
        3 - limit min..max quantity
      The quantity to calculate the position amount in case of
      minMaxQuantityHandling == 3 is

      priceQuantity =
        min(
          maxQuantity,
          max(
            minQuantity,
            quantity-offsetQuantity
          )
        )

      This feature allows to handle scale of discounts as follows:

         quantity         discount
      *      <100             0%
      *   100-200            10%
      *      >200            20%

      Solution 1
      ----------
      Create a product bundle containing three bundled products with the
      following min/max quantities:

                       offsetQuantity minQuantity maxQuantity  price
      * product 0%           0             0          100      P
      * product 10%        100             0          100      P-10%
      * product 20%        200             0          MAX      P-20%

      Solution 2
      ----------
      Create a product bundle containing three bundled products. The
      first is the product with the normal price, the second and third
      are 'discount products'.

                       offsetQuantity minQuantity maxQuantity  price
      * product              0             0          MAX      P
      * discount 10%       100             0          100     -10% * P
      * discount 20%       200             0          MAX     -20% * P


      CR0002776
      Add a view which shows the products which are listed in the contracts of
      an account.

      CR0003051
      Contract positions - support for additional price attributes. Example:
      heating oil is typically sold in litres (--> UOM = Litre), but pricing is
      quoted for units of 100 litres (--> UOM = 100 Litres). A contract positions
      allows to two set two units: position unit and price unit. The amount of
      a position is calculated as amount = quantity * unitScale * pricePerUnit,
      where unitScale = 1 / priceUnit.quantity and the position unit must be a
      base unit of the price unit (--> see uom1 model).

      CR0003402
      Clone, XmlExport: support wildcard (*) referenceFilter. With opencrx-1.7.0
      the user must explicitely name the references of the composite objects to be
      cloned / exported. Since opencrx-1.8.0+ the wildcard pattern :* matches all
      composite, non-derived references. Default matches to :*.

      CR0003437
      Inventory management. Allow to update inventory based on contract positions.
      The operation Contract:updateInventory() updates the depots defined by
      contract positions. A contract allows to define a depot for 'goods delivery',
      each contract position for 'goods issue' and 'goods return'. updateInventory()
      creates a corresponding compound booking.

      CR0003272
      product1, contract1, depot1: compound products. product1 extended by classes
      ProductOffering, ProductBundle, ProductBundledType and BundledProduct.
      This allows to construct complex products based on standard products.
      contract1 extended by classes ProductOfferingPosition, ProductBundlePosition,
      and BundledProductPosition. depot1 extended by ProductOfferingDepotPosition,
      ProductBundleDepotPosition and BundledProductDepotPosition.

      CR0003401
      Prevent login of disabled principals. The Principal's flag disabled allows
      to disable/enable a principal.

      CR0002937
      Security: single principal for multiple segments. For each segment (created
      as root with createAdministrator()) a corresponding realm is created. A
      user with login foo can get access to a segment by executing the operation
      createUser() of the corresponding segment. This adds the principal foo
      to the realms 'Default' (Login realm), 'Root' (access to shared data such
      as codes and unis of measurement) and '<segment>'. The user can switch
      to a segment via the select role drop down.

      CR0003426
      Security: Allow that any user can be segment administrator. If a user is
      added to the group 'Administrators' the admin-<segment name> principal is
      selectable in the 'select role' drop down.

      CR0003275
      product1, contract1: user-defineable attributes. Allow to add user-definable
      attribute definitions to products. The attributes values are defined at
      contract-position level. In the new model a contract position is a
      ProductDescriptor and a product is a ProductConfigurationDescriptor. The
      operations createPosition() and createProductOfferingPosition() copy
      the product configuration automatically to the contract position, setting
      the current configuration of the contract position to the product's
      default configuration.

      CR0003432
      Allow to customize default page size. Add method getGridPageSize(type)
      to Evaluator_1_0.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003424
      The subscription and notification handling of Notification_1 is moved
      to the workflow execution client (WfClient). Object modifications to not
      block the openCRX provider. This is required for large number of subscriptions.

      CR0003420
      Operation Reopen Incident should reset percentComplete. Closing an Incident
      set percentComplete to 100 and many filters (e.g. those showing Open Activities
      only) prevent such Incidents from being shown in the various grids. Hence, the
      operation Reopen Incident should reset percentComplete to a value of less than
      100 (default 50%).

      CR0003403
      Remove deployment units from distributions. Deployment units (EARs) are
      not packaged with the distribution anymore. The installation / deployment
      task looks as follows:
      * Download and extract distribution
      * Install sources with 'ant install-src'
      * Create a properties file which defines the parameters for the deployment units
        (e.g. CRX.properties)
      * Create deployment units with
        > ant -Dassemble.properties.file="CRX.properties" assemble'.
        The assemble target creates the deployment units, e.g.
        opencrx-core-CRX-App.ear, opencrx-core-CRX.ear, opencrx-core-CRX-Root.ear.

2.1.  FIXED BUGS

      SF1282559
      Can not create a quote from a template. When I try to create a quote from this
      template (Template > Create copy), I input the name of my quote (e.g. 'my new quote')
      and click OK. System fails and replies: Can not invoke operation 'org:opencrx:kernel:
      base:TemplateEnabled:createObject' on object 'null'. The reason is DefaultDomain.ABORT.

      SF1290459
      When creating Principal, it accepts latin (portuguese) characters (e.g.
      Opera败s), but, after that, it doesn´t handle it. The error message appears
      like this: 'Opera??es' not found...

      CR0003423, SF1275945
      Column send_date missing in table kernel_Activity.

      SF1282550
      Can not create Depot Entity as guest/user. createAdministrator() does not
      create the two new segments depot1 and model1 are created with the wrong. The
      are implicitely created during servlet init with the wrong permissions.
      createAdministrator() fixed.

      CR0003425
      Create admin does not create segments depot & model. Admin.createAdministrator()
      does not create the segments depot and model with the proper permissions. Segments
      should be created with levels 4/3/2 and be member of group Administrators.

      CR0003422
      Media download problem. Media can not be downloaded with IE5/6 in case
      with https protocol. The error message is "...the file could not be written
      to the cache". Download URLs of the form
      .../ObjectInspectorServlet/<file name>?<params>
      solve the download problem for all browsers and protocols.

      CR0003413 [SF1263857]
      1.7.0: Cannot save Sales Tax for Quote Position. In openCRX v1.7.0 it is
      not possible to store the Sales Tax Type for a Quote's Position. The field
      stays empty no matter how you create or edit a position. There are no errors
      or warnings whatsoever, the value is simply not saved.

2.2   REMOVED FEATURES

      CR0003421
      Remove classes Warehouse and ProductInWarehouse. The warehouse management
      is done with depot1: a warehouse is either mapped to a depot contract
      (depot group) or depot.

      CR0003412
      Modeling: Remove association SalesVisitActivityGeneratesQuote. Replace the
      association by the more generic class ContractReference.

==============================================================================
Version 1.7.1                                                       2005-08-17
==============================================================================

1.    NEW FEATURES
      none

2.    CHANGES

2.0.  CHANGED FEATURES
      none


2.1.  FIXED BUGS

      CR0003408
      build.properties is missing in 1.7.0 distribution. The missing properties
      file requires to run the build with 'ant -Dmodel.transformation.source=rsm
      distribution'.


==============================================================================
Version 1.7.0                                                       2005-08-14
==============================================================================

1.    NEW FEATURES

      CR0003400
      ObjectInspectorServlet: Allow to enable/disable default filter on grid
      init. The default filter is always active when initializing the grid.
      It is now possible to enable/disable the default filter and store the
      current state in the settings. This feature may be useful for
      'expensive' objects/grids, e.g. pipeline, user home, accounts.

      CR0003390
      Searchable and sortable object titles. E.g. the column Activity (name)
      of the grid (filtered) Activities of an Activity Tracker cannot be
      searched or sorted. Filtering on attributes of referenced objects is
      implemented as follows:
      * On persistence-level add the columns of the referenced object as
        private columns p$$<attribute of referenced object>
        (e.g. p$$customer_name). This way they won't be returned in the reply.
      * Use the filter properties p$$<attribute of referenced object> for sorting
        and filtering.
      Evaluator_1_0 offers the new method getTitleAttribute() which returns
      the title attribute of given class.

      CR0003365
      Editable Grids. Grids (object containers) can be customized as inPlace
      editable. If customized as editable, the user can switch such a grid
      (which is being viewed on "show" mode") to "edit" mode (without server
      roundtrip). Once a grid is in edit mode it cannot be switched back to
      show mode without either committing/saving or discarding changes. The
      edit grid supports cloning of existing and creation of new empty rows.

      CR0003270
      depot1. New model allows to manage depot entities, depot contracts,
      depots, depot positions, booking periods, bookings and depot positions.
      Depot positions are the booking target, each booking is assigned to
      a compound booking. A booking is either a debit or a credit booking.
      The debit balance of a compound booking must be equal to the credit
      balance. The model is generic. It can be used to manage any kind
      of booking target:
      * Cash / Money / Points
      * Products
      * Component / Product relationships
      * etc.
      A compound booking has two states: pending and processed. When
      creating a new compound booking the state is set to pending. A
      compound booking is typically accepted by own or more users. The
      finalize operation puts the booking into state processed. Finalizing
      a booking is typically controlled and performed by an external
      workflow process.

      CR0003363
      Asynchronous workflows. Topic subscriptions which result in the
      execution of workflows were executed synchronously by the openCRX
      (application) plugin. As a new feature, workflows can be declared
      as asynchronous. The execution of asynchronous workflows is
      performed in two steps:

      * Creation of a WfProcessInstance object with startedOn==null.
        WfProcessInstance objects are created automatically by the openCRX
        application plugin on matching topic subscriptions. startedOn==null
        indicates that the process was not started yet.
      * WfExecutionClient is the standalone workflow executor running as
        openCRX client. The executor periodically scans for non-started
        workflows and executes them. After execution it sets startedOn to
        the execution date. It also increments the stepCounter in case of
        failure and success. If the stepCounter reaches the maxNumberOfRetries
        threshold the workflow is not executed.

      The WfExecutionClient can be started with the ant target 'ant
      WfExecutionClient'. The resource file opencrx/core/src/ear/
      opencrx-core-WfExecutionClient.ear/server.rar/META-INF/ra.xml
      allows to specify the openCRX server URL.

      NOTE: For each provider/segment combination a seperate WfExecutionClient
      must be started.

      CR0003286
      ActivityTrackers and Contracts implement the TemplateEnabled pattern
      (implement the interface org:opencrx:kernel:base:TemplateEnabled. A
      template enabled object offers the following features / operations:

      * The operation 'createObject' allows to to create a clone of the
        template. The attribute 'referenceFilter' of a template allows to
        specify exactly the dependent (composite and referenced) objects
        to be cloned. Here are some examples for reference filters:
        - ActivityTracker (clone referenced activities): trackerParticipant,
          trackerCategory, trackerMilestone, trackerActivityLink, replacement,
          chart, trackerActivityLink/:*/activity
        - ActivityTracker (do not clone activities): trackerParticipant,
          trackerCategory, trackerMilestone, trackerActivityLink, replacement,
          chart
        - Contract: position, replacement

      * The operation 'deleteObject' allows to remove an object created from
        a template including all dependent objects specified by the reference
        filter.

      * The operation 'applyReplacements' allows to apply replacement values
        on an object (and its dependent objects) created from a template. E.g.
        Replacement values can be considered as variables defined by a template.
        'applyReplacements' allows to run a search/replace on objects created
        from a template.

      CR0003273
      OMG MOF model (MOF). Add MOF model1 as org:opencrx:kernel:model1. The
      new model allows to store MOF compliant data types required to store
      reusable software assets.

      CR0003176
      OMG reusable assets (RAS). Reusable assets added as model extension
      of product1. Artifacts are any workproducts from the software development
      lifecycle, such as requirements documents, models, source code files,
      deployment descriptors, test cases or scripts, and so on.

      CR0003328
      document1: add document revisions and folders. Allow documents to have
      revisions and to be member of document folders. Revisions must be URI,
      Media reference and Media content.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003389
      Access control: owning group of new objects. The default owning group of
      newly created objects should be set to owninGroup = parent.owningGroup +
      user.getPrimaryGroup.

      CR0003339
      Unify contract tables.
      * Merge tables kernel_Lead, kernel_Opportunity, kernel_Quote,
        kernel_SalesOrder, kernel_Invoice to kernel_Contract.
      * Merge tables kernel_OpportunityPosition, kernel_QuotePosition,
        kernel_SalesOrderPosition, kernel_InvoicePosition to kernel_ContractPosition.


2.1.  FIXED BUGS

      CR0003261
      Activities like e-mail, fax, etc. do not show up in activities grid of sender.

      CR0003303
      Activity PhoneCall not visible in Callers and Callees Activity List.

      CR0003277
      Clone of ContractPosition does not work. It looks like other people are
      having similar issues with the "Clone"-Operation:
      https://sourceforge.net/tracker/?func=detail&atid=610619&aid=1209029&group_id=95219.
      Clone implementation rewritten.

      CR0003278
      Operation "mark as closed" does not work on leads.


==============================================================================
Version 1.6.1                                                       2005-05-31
==============================================================================

1.    NEW FEATURES

      CR0003263
      Support Sun ONE Application Server 8.1. Add deployment descriptors and
      test openCRX with SUN ONE Application Server 8.1.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003257
      Charts on homepage should display open items only.

2.1.  FIXED BUGS

      CR0003295
      Clone() operation result type mismatch. clone() returns CloneResult
      whereas model specifies CloneableResult. Will change model to CloneResult.

      CR0003294
      kernel_AssignedContract referenced by dbObject[143]. Clean installations
      do not create the deprecated table kernel_AssignedContract. dbObject[143]
      still references it which results in MEDIA_ACCESS when deleting objects.


==============================================================================
Version 1.6.0                                                       2005-05-16
==============================================================================

1.    NEW FEATURES

      CR0002917
      Add binary value class WordValue. Extends BinaryValue and generates HTML
      as specified by #0002832. Add mime type configuration to web.xml.

      CR0002918
      Add binary value class ChartValue.

      CR0003131
      Replace operations buttons with operations menu.

      CR0003197
      Charts with horizontal bars that auto-scale.

      CR0002497
      Make e-mail addresses clickable.

      CR0003007
      ShowObject: second-level navigation from root objects (DHTML Menu).

      CR0003078
      Add htmlArea control.

      CR0002530
      Keep user settings between sessions.

      CR0003118
      Settings: allow to store default filter in settings.

      CR0003080
      Workflows: add user-defineable workflows. This behaviour is implemented
      by extending the interface Evaluator_1_0 by the method isEnabled(element,
      refObj). The method determines in the context of object refObj whether the
      element is enabled / disabled.

      CR0003159
      Show last init time of data object manager.

      CR0003161
      exportXml: allow to specify transitive export closure.
      The referenceFilter 'note, address, reportsTo, reportsTo/:*/reportsTo,
      reportsTo/:*/reportsTo/:*/address, reportsTo/:*/reportsTo/:*/note' exports
      the following objects
      * the invoked object
      * notes of invoked object
      * addresses of invoked object
      * the reportsTo contact of the invoked object
      * the reportsTo contact of the reportsTo contact of the invoked object
      * addresses and notes of the reportsTo contact of the reportsTo contact of the
        invoked object

      The referenceFilter 'customer, salesRep, address, position, position/:*/product,
      position/:*/uom, position/:*/salesTaxType' applied on a contract exports:
      * contract
      * referenced customer
      * references salesRep
      * contained addresses
      * contained positions
      * products referenced by positions
      * uoms referenced by positions
      * sales tax types referenced by positions

      CR0003058
      Add activity tracker. This allows to manage and organize activities.

      CR0003169
      Refresh all views after reload. Only current view is refreshed. All other
      views are in 'dirty' state even after reload.

      CR0003142
      EMail system account.
      * User must define a default EMail account with defined E-mail address.
      * Segment administrator must define an EMail account with qualifier
        SYSTEM and Outgoing Mail Server (SMTP) settings.
      SendMail takes the SYSTEM account, if outgoing and incoming mail server of
      default EMail account are empty and the SYSTEM account exists.

      CR0003093
      Modeling: CrxObjects are SubscriptionTargets.

      CR0003168
      Remove script tags. Remove Javascript from new posts (i.e. remove anything
      between <script>...</script> tags. New option httpEncoder allows to configure
      a class implementing HttpEncoder_1_0.

      CR0003167
      Email Address Munging.
      Bugzilla adds HTML obfuscation of email addresses to hide emails from bots,
      crawlers and spiders. bugzilla simply replaces the "@" with "&#64;" (e.g.
      bugs&#64;bengoodger.com). New option httpEncoder allows to configure a class
      implementing HttpEncoder_1_0.

      CR0003106
      Make principal separator configurable.
      The following steps are required to change the ID_SEPARATOR:
      * Specify the system property org.opencrx.kernel.generic.SecurityKeys.ID_SEPARATOR=<new separator>
      * Set initPrincipal in web.xml to admin<new separator>Root and
        loader<new separator><segment name>, respectively
      * Modify the qualifier of the admin-Root principal in
        ...\bootstrap\Root\102_security_realms.xml to admin<new separator>Root,
        i.e. modify the line '... org.opencrx.security.realm1.Principal name="admin-Root" ...'

      CR0003209
      Add support for WAS6.

      CR0003058
      Activity tracker added. activity1 extended by ActivityTracker which
      allows to track and manage activities the same way as known by bug
      and incident tracker tools.

      CR0003161
      exportXml: allow to specify transitive export closure. The exportXml
      operation takes two parameters:
      * referenceFilter: list of instance-level reference selectors, e.g.
      account, customer, customer/:*/address.
      * attributeFilter: list of name value pairs where key is a refernceFilter
      and value an XML exported, base64 encoded filter.

      Examples:
      The referenceFilter 'note, address, reportsTo, reportsTo/:*/reportsTo,
      reportsTo/:*/reportsTo/:*/address, reportsTo/:*/reportsTo/:*/note'
      exports the following objects
      * the invoked object
      * notes of invoked object
      * addresses of invoked object
      * the reportsTo contact of the invoked object
      * the reportsTo contact of the reportsTo contact of the invoked object
      * addresses and notes of the reportsTo contact of the reportsTo contact
        of the invoked object

      The referenceFilter 'customer, salesRep, address, position, position/:*/product,
      position/:*/uom, position/:*/salesTaxType' applied on a contract exports:
      * contract
      * referenced customer
      * references salesRep
      * contained addresses
      * contained positions
      * products referenced by positions
      * uoms referenced by positions
      * sales tax types referenced by positions

      The following additional element definition allows to specify a customized
      export contract operation based on the exportXml operation:

      <org.openmdx.ui1.AdditionalElementDefinition id="ExportQuote">
        <_object>
          <active>true</active>
          <toolTip>
            <_item>Export Quote</_item>
          </toolTip>
          <label>
            <_item>Export Quote</_item>
          </label>
          <iconKey>org:opencrx:kernel:Export</iconKey>
          <order>
            <_item>0</_item>
            <_item>0</_item>
            <_item>6</_item>
          </order>
          <forClass>
            <_item>org:opencrx:kernel:contract1:Quote</_item>
          </forClass>
          <memberElementName>
            <_item>referenceFilter</_item>
          </memberElementName>
          <memberDefaultValue>
            <_item>customer, salesRep, address, position, position/:*/product, position/:*/uom, position/:*/salesTaxType</_item>
          </memberDefaultValue>
        </_object>
      </org.openmdx.ui1.AdditionalElementDefinition>

      CR0003164
      ObjectInspectorServlet: support binary streams. Support on-demand retrieval
      of binary streams, i.e. attributes modeled as <<stream>> a: org::w3c::binary.

      CR0003080
      Add context-sensitive element enabling/disabling. In addition to the
      modeled operations, the inspector shows status (context) specific
      operations (transitions). Example: 'Mark As Read' is only shown when
      the Object is not read. This behaviour can easily be implemented by
      extending the interface Evaluator_1_0 by the method isEnabled(element,
      refObj). The method determines in the context of object refObj whether
      the element is enabled / disabled.


      CR0003118
      ObjectInspectorServlet: allow to store default filter in settings. Add
      the new filter 'Default' and the new operation 'Set as default'. This
      allows to set a default filter per grid. The default filter settings
      are stored in user user settings.

      CR0002530
      Keep user settings between sessions. The user settings are stored
      in Java Properties syntax in the attribute UserHome.settings.

      CR0003116
      ObjectInspectorServlet: new option userHome. When specifying the option
      userHome, the user settings are loaded/stored in the feature 'settings'
      in Java property syntax.

      CR0003115
      ObjectInspectorServlet: support iconKey and ordering for user-defined
      filters.
      <void property="iconKey">
        <string>ABC.gif</string>
      </void>
      <void property="order">
        <array class="java.lang.Integer" length="1">
          <void index="0">
            <int>90</int>
          </void>
        </array>
      </void>

      CR0003114
      ObjectInspectorServlet: support ordering of class filters. Support
      inspector ordering for class filters.

      CR0003113
      Ui_1: support ordering of inspectors.
      <org.openmdx.ui1.ElementDefinition name="org:opencrx:kernel:account1:Contact">
        <_object>
          <active>true</active>
          <toolTip>
            <_item>Contact Person</_item>
          </toolTip>
          <label>
            <_item>Contact</_item>
          </label>
          <iconKey>org:opencrx:kernel:account1:Contact</iconKey>
          <order>
            <_item>0</_item>
            <_item>0</_item>
            <_item>40</_item>
          </order>
        </_object>
        <_content/>
      </org.openmdx.ui1.ElementDefinition>

      CR0003072
      ObjectInspectorServlet: support icon keys for code value entries. The
      servlet accepts the new optional feature iconKey for code value entries.
      Code attributes and cells in grids are rendered with the configured icon.

      CR0003071
      ObjectInspectorServlet: support for colored code value entries. The
      servlet accepts the new optional features color and backColor. Coded
      attributes and grid rows are rendered with the specified colors.

      CR0002292
      Ui_1: extend element definition by skipRow. For various layout configurations
      it would be nice to have a "field-placeholder" available to better control
      the layout rendering. For example, it is currently not possible to produce
      a layout as follows (top cell of 2nd column empty):

      +-----+-----+
      | fld1|[empty]|
      +-----+-----+
      | fld2| fld3|
      +-----+-----+

      CR0002851
      ObjectInspectorServlet: support for stated code value entries. The
      servlet accepts the new optional features validFrom and validTo
      for code value entries. Entries with current date outside
      [validFrom, validTo] are not shown in drop downs when editing objects.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0003105
      Modeling: address references of activities should be composite objects.
      Change address references of activities to standalone composite classes
      containing the address reference and the membership type.

      CR0003104
      Modeling: activity classes are of the same type. Activity classes
      EMailActivity, SmsActivity, MmsActivity, ... are subclass of the abstract
      class Activity which is composite to Segment. Change composition of
      existing activity classes.

      CR0003100
      Reload objects if composites are created/deleted/changed.

      CR0003242
      createAdministrator: create user group 'Unspecified'. Change the group
      membership as follows:
      * Administrators is member of Unspecified
      * Users is member of Unspecified
      * Unassigned is member of Users
      * Segment administrator is member of groups Administrators and Users

      CR0003117
      ObjectInspectorServlet: replace option lastViewedObject by new option
      accessHistory. Replace the options lastViewedObjectsReference,
      lastViewedObjectsClass and lastViewedObjectsExclude by accessHistoryReference,
      accessHistoryClass and accessHistoryExclude option, respectively.

      CR0003029
      Verify alerts delete algorithm triggered by HomePage Refresh. Refreshing
      a userhome deletes alerts in a very generous way (and it seems regardless
      of state, i.e. even NEW alerts are deleted). Only alerts with state=3 (Accepted)
      should be deleted.

      CR0003104
      Modeling: activity classes are of the same type. Activity classes
      EMailActivity, SmsActivity, MmsActivity, ... are subclass of the
      abstract class Activity which is composite to Segment. Composition of
      existing activity classes is changed.

      CR0003105
      Modeling: address references of activities should be composite objects.
      Change address references of activities to standalone composite classes
      containing the address reference and the membership type.

2.1.  FIXED BUGS

      CR0002741
      <changeable>false</changeable> for code fields ignored in edit mode.

      CR0003012
      Copy/paste of URLs to add references does not work.

      CR0003000
      Qualifiers do not accept UTF8 chars.

      CR0003219
      account1: name conflict feature 'organization'. Defined in Contact:organization
      and LegalEntity:organization. Rename LegalEntity:organization to
      LegalEntity:organizationalUnit.

      CR0003222
      kernel_Property: "NAME": invalid identifier. kernel_Property does not
      match model. db scripts fixed.

      CR0003240
      AccessControl: edit object must not set default owningGroup. The primary
      group is added in case of object modifications if object does not have
      assigned groups.

      CR0003193
      Lookup inspector with bad Javascript if token contains '.

      CR0003054
      Contract position - initial price per unit not committed.
      * Editing this position, changing the prices and then committing again
        is possible (and the correct values are kept).
      * At Sales Order (part of sales pipeline) when you create
      a position and assign a product (by the glases from the
      product list) there are a couple of problems with the
      current v.1.5 release.

      1. Enter a "Price per unit" and klick on Save. The
      price you just entered will not bestored. Do it again
      by editing the position, save it again and then the
      price will be listed.

      2. If the price you entered is lower then the base
      price you stored with the product, a discount to the
      base price shows up automatically. This is a very nice
      feature but it seem to work only sometimes.

      3. The inspector does not update the price information
      of positions on time. That means that after you entered
      positions with prices the inspector will not update the
      price information until you start to open the Sales
      Order from the Sales Order List again. This is of
      course confusing since you have no indication whether
      you made a mistake (forget to enter the price) and
      requires too many clicks.

      4. When you use the magnifying glas to point to an
      existing product that have a base price you expect the
      price to show up as List Price.

      CR0003017
      XML Exporter broken. Items containing "&" are not exported properly.

      CR0003000
      Qualifiers do not accept UTF8 chars.


==============================================================================
Version 1.5.0                                                       2005-02-26
==============================================================================

1.    NEW FEATURES

      CR0002923
      Make password encoding configurable. OpenCrxKernel_1 supports new option
      APPLICATION/passwordEncodingAlgorithm. Default is MD5.

      CR0002771
      Sample openCRX client. The client org.opencrx.demo.kernel.SimpleClient is
      a very simple client which shows how to implement an openCRX client
      using the openCRX programming API. The client consists of:
      * The class org.opencrx.demo.SimpleClient containing the client's main.
      * The client application deployment descriptors located in the directory
        src/ear/demo.opencrx-core-CRX-SimpleClient.ear. The client is a J2EE
        compliant application client which is configured in .../client.jar.
        It is launched using the openMDX client application launcher
        org.openmdx.kernel.application.client.Launch.
      * The ant target demo-SimpleClient located in build.xml.

      IMPORTANT:
      * The client expects that openCRX is up-and-running on localhost:8080.
      If openCRX is located on a different host/port you must adapt
      .../server.rar/META-INF/ra.xml.
      * The client connects with user Guest/Guest to the openCRX server. If
      you want to connect with a different user you must adapt
      .../server.rar/META-INF/ra.xml.

      The client can be used as template to write any kind of openCRX client:
      * Data importer/exporter
      * Report generator
      * Fat client GUI
      * Thirdparty adapter
      * ...

      CR0002978
      Create user 'loader-...'
      In addition to the segment admin user (admin-<segment>), the operation
      createAdministrator() creates the user loader-<segment>. loader-...
      is added for:
      * It is configured as initPrincipal (in web.xml). Data imports are
        performed as loader-... (instead admin-...)
      * The Notification_1 plugin ignores any subscriptions when receiving
        modification requests from the user loader-...

      CR0002486
      Email alerts. Add option to send email notifications on incoming alerts.
      Subscribing to the topic 'Alert Modifications' executes the workflow
      'SendMail'.

      CR0002968
      Add AssignedActivities and OpenActivities to UserHome and Account.

      CR0002955
      Add audit support. Each CrxObject has a new reference 'audit' which
      contains the audit trail of an object. The before image of an audit entry
      contains all attribute values of the original object, i.e. before it is
      modified. All Audit entries are physically added to segments (reference
      audit) stored in table kernel_AuditEntry. They are mapped to their
      corresponding auditees by Audit_1.

      CR0002935
      Add publish / subscribe functionality. workflow1:Topic allows to create
      topics which 'listen' to object path patterns and the events add, remove
      and update. The topic defines a workflow which is executed as action.
      With home1:Subscription users can subscribe to these preconfigured topics.
      The workflow is executed on behalf of the user.

      CR0002936
      Workflow configuration properties. Add workflow configuration properties
      to workflow definition. Extend Workflow_1_0 interface correspondingly.

      CR0002501
      UiUtility: option format=table|schema added.
      * table: existing merge format
      * schema: ui1.xsd compliant merge format
      The new format 'schema' allows to merge the language-specific ui files
      into one single XML file. This simplifies structural reorgs.

      CR0002960
      Add SendMail workflow. Add a workflow which is able to send email
      notifications.

      CR0002621
      The class "Activity" features an attribute "isBilled" - what is missing,
      however, is information
      - to whom (Account) it is billed (potentially a list of accounts with a
        distribution key, e.g. Account#1 20%, Account#2 80%)
      - "link" between the Activity and the corresponding Invoices
      The references 'contract' and 'invoice' are added to the class Activity.

      CR0002953
      XML: export object at most once.

      CR0002930
      Customize WAR/EAR: allow to configure external provider.
      <provider>-properties.xml supports the new options
          external.provider.enable.begin
          external.provider.enable.end
          external.provider.delegation.path
          external.provider.jndi.name.format1
          external.provider.jndi.name.format2
          extensions.library.files
          extensions.library.home
          extensions.library.name
          extensions.classes
      This allows to configure an external provider which can be accessed
      from the kernel provider. This allows workflows to access user-defined
      business-logic and data.

      IMPORTANT: This version of openCRX requires that the external provider
      is an openMDX based component. If an openMDX gateway is configured
      as external provider allows to integrate any number of openMDX based
      and non-openMDX based providers.

      For more info see CRX-properties.xml.

      CR0002899
      Xml export of code values. The currently available XML exporter exports
      the code value only for code attributes.
      Example: <salutationCode>1</salutationCode>
      For the purpose of rendering support the the exported XML data it would be
      convenient to also have the corresponding texts (short and long) available.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0002969
      Remove jre-1.3 support. jre-1.3 was required for WebSphere 5.0 support.
      WebSphere 5.1 (and all other AppServers) support jre-1.4+.

2.1.  FIXED BUGS

      CR0002933
      Operation Remove Owning Group removes ALL owning groups.

      CR0002932
      operation Add Owning Group behaves like Set Owning Group.


==============================================================================
Version 1.4.0                                                       2005-01-14
==============================================================================

1.    NEW FEATURES

      CR0002861
      DatabaseLoginModule for JBoss. Principals, roles and credentials are
      stored in the tables security_Principal, security_Role and security_
      Credential. They can be accessed by a JBoss DatabaseLoginModule.
      Sample policy configuration can be found in src/connector/jboss-3.

      CR0002656
      Complete AccessControl_1 plugin. The plugin controls object access
      according to accessLevelBrowse, accessLevelUpdate, accessLevelDelete,
      owningUser, owningGroup and the users group membership. The semantics
      of the access levels is as follows:
      * private: only owner has permission to access object
      * basic: only owner and users which are member of owningGroups, all of
        their subgroups and the direct supergroups have permission to access
        the object.
      * deep: only owner and users which are member of owningGroups, all of
        their subgroups and the direct supergroups and all of their subgroups
        have permission to access the object.
      * global: all users have permission to access the object.

      The database script set-access-level.sql allows to initialize the
      access levels and owning users and groups of all objects.

      The user 'root' is renamed to 'admin-Root'.

      CR0002817
      Support for MySQL 4.1+. Restriction: SQL view SearchIndexEntry (join
      Address <-> Account) does not work.

      CR0002820
      Support for bootstrap data loading. ObjectInspectorServlet loads/stores
      codes before storing user-defined data. This is not desired when user-
      defined data must be loaded before loading the codes, e.g. security data
      in the openCRX root servlet.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0002888
      Rename application roles.
      Root servlet
      * openCRXRoot -> OpenCrxRoot
      Standard servlet:
      * openCRXUsers -> OpenCrxUser
      * new: OpenCrxAdministrator

      CR0002889
      Decommit Unicode support for MaxDB. 4000 16-bit chars -> 8000 8-bit chars
      in order to prevent 'row too large'.

      CR0002814
      Optimize and fix UserHome:refresh. Performance of refresh improved more
      than by a factor 6.


2.1.  FIXED BUGS

      CR0002883 [ 2927506 ]
      Prices of contract position not updated when changing product.

      CR0002814
      Optimize and fix UserHome:refresh.

      CR0002880
      Deployment of openCRX on IBM WebSphere. ibm-web.bnd.xmi fixed.

      CR0002858 [ 1092691 ]
      Operation Create Opportunity fails on leads created from account.

      CR0002846
      CreatePosition (Quote, SalesOrder) fails. CreatePosition fails even if
      defaultUom of product is set. However, also setting salesTaxType helps,
      i.e. if both defaultUom and salesTaxType of a product are defined, then the
      operation CreatePosition works fine and the position is created without
      exception.

      CR0002840
      Customize WARs and EARs. Not all references in generated WARs/EARs are
      fixed properly.


==============================================================================
Version 1.3.0                                                       2004-12-15
==============================================================================

1.    NEW FEATURES

      CR0002811
      Add AuditLog. In addition to SysLog and AppLog add the new logger AuditLog.
      The logger can be used e.g. in Login.jsp in order to log successful/unsucessful
      login attempts.

      From opencrx-1.3.0 on the EARs contain log configurations for AppLog and AuditLog.
      They can be activated by renaming the -D option org.openmdx.log.config.filename
      to org.openmdx.log.config.filename.syslog (the SysLog properties do not override
      the application-specific properties). This generates the log files opencrx-CRX.AppLog.log,
      opencrx-CRX.AuditLog.log and server.shared.20041214.log.

      CR0002744
      View activities of an account. involvedAccount is automatically updated
      when modifying sender, toRecipient, ccRecipient, bccRecipient or adding/
      removing MeetingActivityParty. Additional involvedAccounts can be added
      manually.

      CR0002781
      Add LogConsoleServlet to root application.

      CR0002773
      contract1: add AccountAddress as subclass of ContractAddress. Allow to add
      address references to a contract which are already present on an account.

      CR0002746
      Add WebSphere 5.x deployment descriptors.

      CR0002791
      Package HtmlGUI as EAR instead of WAR. WebSphere requires application-
      specific deployment descriptors (ibm-application...xmi) for proper security
      and library configuration.

      CR0002757
      Improved locale management:
      The restrictions
      (1) locale numbering in web.xml starting at 0 WITHOUT gaps
      (2) locale ids in web.xml must equal locale ids in locale.xml
      will cause renumbering/reloading of codes whenever with virtually every
      change (e.g. it's currently not possible to 'disable' a language by removing
      it from web.xml unless locale.xml is also adapted...).

      CR0002768
      [open] filter for pipeline items. even though it's possible to view open
      pipeline items assigned to oneself on 'my homepage' it would be nice to
      have a filter [open items] for each of the grids Leads, Opportunities,
      Quotes, Sales Orders, Invoices.

      CR0002748
      Operation "CreateLead" does not set "salesRep".

      CR0002723
      Operation parameter fields partly cleared in server reply.
      Scenario: creating many new openCRX users with the operation
      UserHomes:createUser:
      1) filling in all the operation parameters
      2) click [OK]
      3) even though "visually" all the operation parameter fields still seem
         populated at least the hidden references (lookup fields) are cleared in
         the server reply; hence, to complete another createUser operation
         successfully ALL lookup fields must be populated again (even though
         some of the values could be reused if the hidden values were still
         present)

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0002790
      createAdministrator: create principal 'admin-Standard' instead of
      admin@Standard.


2.1.  FIXED BUGS

      CR0002797 [1082096]
      Cannot create delivery requests.

      CR0002728
      security_REF_SEQ not created with upgrade script.

      CR0002772
      XmlExport - XmlImport roundtrip fails.

      CR0002763
      Cannot add address group members. Apply upgrade-from-1.2.0-to-1.2.0.sql
      to resolve.

      CR0002755
      [1066547] NullPointerException during user creation. If no password is
      supplied, user creation fails with a NullPointerException in UserHome.

      CR0002722
      Cannot inspect search results. Clicking on an icon in the Grid of the
      tab [Search] in the Account Provider results in the following error (and
      the object cannot be inspected): Can not select object
      'xri:@openmdx:org.opencrx.kernel.account1/provider/CRX/segment/Standard/
      searchIndexEntry/....'.


==============================================================================
Version 1.2.0                                                       2004-11-05
==============================================================================

1.    NEW FEATURES

      CR0002667
      Add user-definable workflow extension. Rework and streamline workflow1
      model in order that it supports Java implemented workflows.

      CR0002660
      Implement createPosition.

      CR0002661
      Add operation Account:createLead(). Create a lead starting from an
      existing account.

      CR0002659
      OpenCrxKernel_1 plugin: add operation exit for user-defined operations.
      User-definied operations should be added as subclass of OpenCrxKernel_1.

      CR0002591
      Extend document1:Document to support 'local documents'.

      CR0002554
      ObjectInspectorServlet: successful create/new operation should return
      URL of created object.

      CR0002540
      Contract extensions:
        +Lead:closeProbability
        Quote:estimatedOrderDate -> estimatedCloseDate
        +Quote:closeProbability
        +ContractPosition:discountDescription
        +OpportunityPosition:estimatedCloseDate
        +OpportunityPosition:closeProbability
        +QuotePosition:estimatedCloseDate
        +QuotePosition:closeProbability

      CR0002508
      Add contact OE membership view. Reference Contact -> OrganizationalUnit
      added.

      CR0002485
      Forward jumping in sales process. It should be possible to navigate from
      lead -> opportunity -> quote -> sales order -> invoice in addition to back
      navigation.

      CR0002653
      ObjectInspectorServlet: add loadData option. Data is only loaded when
      option loadData=true.

      CR0002071
      Additional views. The following tabs/views were added:
      * Account: assignedContract, openContract
      * Account: assignedActivity, openActivity
      * UserHome: openContract, openActivity

      CR0002557
      automatic completion of 'ratedBy' if new Rating is created. Assuming that
      in 80% of all cases a new rating should be assigned to the currently logged
      in user the field "ratedBy" should be completed automatically if it is left
      empty when creating a new rating (behaviour similar to the auto-fill of
      new leads, opportunities, etc. when the field "salesRep" is left empty).

      CR0002643
      Add tool tips for operations buttons.

      CR0002644
      ObjectInspectorServlet: nested grid tabs (e.g. fly-out or expand for
      nested levels).

      CR0002626
      ObjectInspectorServlet: improved 'forward-scrolling' in Grid.

      CR0002593
      UserHome should be ExporterImporter.

      CR0002617
      ObjectInspectorServlet: improve error message in case of missing code
      table. If a code table is defined for a feature of class B.f (e.g.
      Contact:userCode0) it must also be defined for class A.f (e.g.
      CrxObject:userCode0), if B is a subclass of A. Edit object operates
      always on the code table A.f. A warning is issued now in this case.

      CR0002558
      Multi-entity support. build.xml allows the generation of entity-specific
      distributions. Provider and segment names should be configurable.

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0002600
      contract1 Operation createXXX changes SalesRep. If a SalesRep is
      assigned to the source contract the propagated contract should be
      assigned the same SalesRep and not the user who is currently logged in.

      CR0002592
      Default setting for grid table back to "narrow".

      CR0002629
      field name of LegalEntity too short.


2.1.  FIXED BUGS

      CR0002707 [ 1052222 ] Potential Pb in ObjectReference.
      The toString() method of org.openmdx.application.gui.generic.servlet.
      attribute.ObjectReferenceValue performs a cast on the return result of
      the getValue() method on the same object. This cast will fail if
      getValue() returns a MarshallingCollection instance.

      CR0002705 [ 1036105 ] decimal attributes, Oracle 9, Locale de_DE.
      If you try to store an attribute of type org::w3c::decimal with Oracle
      (9i) and with a default Locale de_DE, you get an "invalid number" sql
      exception, because the sql is generated with BigDecimal.toString(), with
      always has a point as decimal seperator. The Oracle driver uses the Locale
      and is expecting a comma as decimal separator. Now setInt(), setLong() and
      setBigDecimal() is used instead of setString().

      CR0002612 [ 1040880 ]
      The totals are not calculated correctly.

      CR0002586
      Contracts: createX does not copy all values.

      CR0002481
      Lead closed with 'mark as closed' remains in list/chart 'open leads'.

      CR0002650
      ShowObject.jsp: fix img tags.

      CR0002559
      Phone number automatic parsing behaviour. Editing an existing phoneNumber
      and leaving 'automatic parsing' on results in deletion of 'fullNumber'
      when the object is committed...

      CR0002616
      ObjectInspectorServlet: locale ordering does not match web.xml.

      CR0002615
      [ 1035521 ] Legal entities filtered out.
      The alphabetical filters on the accounts display don't display the legal
      entities. I you create a legal entity named "Fidelead", and then
      click on the DEF filter, the entity is not shown.

      CR0002614
      [ 1035541 ] Cannot add Recipient (TO) to EmailActivity.
      Can not edit the object reference 'org:opencrx:kernel:activity1:
      EMailActivity:toRecipient' for field 'xri:@openmdx:org.opencrx.kernel.account1/
      provider/CRX/segment/Standard/account/42b61c00-0cc2-11d9-8596-398aea15cb55/address/
      11d4afb0-0cdc-11d9-9038-35a0e3be8a7d'.

      CR0002575
      XML importer: must remove derived and non-changeable attributes. Derived
      and non-changeable attributes are propagated to the persistence layer by
      the XML importer.


==============================================================================
Version 1.1.1                                                       2004-09-03
==============================================================================

1.    NEW FEATURES

      CR0002524
      Support for Firebird.

      CR0002523
      Support for PostgreSQL.

      CR0002501
      UiUtility tool added which supports localization of ui configurations.

      CR0002502
      CodeUtility tool added which supports localization of code files.

      CR0002258
      vCard and vCalendar importer/exporter.

      CR0002537
      Add XmlImporter/XmlExporter. IMPORTANT: the export does not scale well
      for large result sets yet (> 5000 objects).

2.    CHANGES

2.0.  CHANGED FEATURES

      CR0002538
      Add locale fallback to ObjectInspectorServlet. Add locale fallback based
      on language instead of fully qualified locale string. The fallback
      algorithm works as follows:
      - Iterate all locales configured in web.xml starting from 0, i.e.
        locale[0], locale[1], ..
      - Try to load resources from locale i, i.e. config/code/<locale i>,
        config/ui/<locale i>, config/texts/<locale i>.
      - If no resources are found at locale i fallback to resources of
        locale j, where j = max(J), J = {0} + {j, locale[i].lang == locale[j].lang}.
      If e.g. the locales en_US, de_CH and de_DE are configured and no resources
      are available for de_DE then de_DE falls back to de_CH.

      CR0002506
      Column 'location' in kernel_Document too short. Changed to VARCHAR(500).


2.1.  FIXED BUGS

      CR0002543
      ObjectInspectorServlet: modify field defined as AlternateElementDefinition
      not possible.


==============================================================================
Version 1.0.2                                                       2004-08-08
==============================================================================

1.    NEW FEATURES

      CR0002494
      Warning message if parsing of a string in (edited) reference fields
      does not yield an object. Example: user edits a contact and enters the
      name of a contact into the field 'Reports to' (instead of pasting the URL
      to that particular contact or using the lookup Inspector to locate the
      contact) - obviously, parsing the name does not yield an object id and
      hence the user's input is discarded when the edited contact is committed.
      A warning message is displayed when the input is (invalid/)discarded.


2.    CHANGES

2.0.  CHANGED FEATURES
      none

2.1.  FIXED BUGS

      CR0002495
      Fix locale handling.
      Stringified numbers are returned using the VM locale while numbers are
      parsed with native BigDecimal constructor. This is only OK for locale en_US.
      1) take user locale setting
      2) correct locale must be used for rendering and parsing


==============================================================================
Version 1.0.1                                                       2004-08-05
==============================================================================

1.    NEW FEATURES
      none

2.    CHANGES

2.0.  CHANGED FEATURES
      none

2.1.  FIXED BUGS

      CR1003934
      some ui-config files are broken.

      CR0002479
      sql: column next_step missing in kernel_Lead.


==============================================================================
